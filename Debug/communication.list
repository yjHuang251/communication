
communication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005220  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080053f8  080053f8  000153f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005438  08005438  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08005438  08005438  00015438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005440  08005440  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005440  08005440  00015440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005444  08005444  00015444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005448  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  20000014  0800545c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e8  0800545c  000201e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014197  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000253e  00000000  00000000  000341db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001080  00000000  00000000  00036720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa8  00000000  00000000  000377a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021075  00000000  00000000  00038748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012ed6  00000000  00000000  000597bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ccde7  00000000  00000000  0006c693  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013947a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045dc  00000000  00000000  001394cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000014 	.word	0x20000014
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080053e0 	.word	0x080053e0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000018 	.word	0x20000018
 8000214:	080053e0 	.word	0x080053e0

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000520:	f000 fb1f 	bl	8000b62 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000524:	f000 f80b 	bl	800053e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000528:	f000 f900 	bl	800072c <MX_GPIO_Init>
  MX_DMA_Init();
 800052c:	f000 f8cc 	bl	80006c8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000530:	f000 f87e 	bl	8000630 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8000534:	f000 f844 	bl	80005c0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  main_function();
 8000538:	f000 f928 	bl	800078c <main_function>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800053c:	e7fe      	b.n	800053c <main+0x20>

0800053e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053e:	b580      	push	{r7, lr}
 8000540:	b094      	sub	sp, #80	; 0x50
 8000542:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000544:	f107 0318 	add.w	r3, r7, #24
 8000548:	2238      	movs	r2, #56	; 0x38
 800054a:	2100      	movs	r1, #0
 800054c:	4618      	mov	r0, r3
 800054e:	f004 ff3f 	bl	80053d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000552:	1d3b      	adds	r3, r7, #4
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000560:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000564:	f001 f87a 	bl	800165c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000568:	2302      	movs	r3, #2
 800056a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800056c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000570:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000572:	2340      	movs	r3, #64	; 0x40
 8000574:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000576:	2300      	movs	r3, #0
 8000578:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057a:	f107 0318 	add.w	r3, r7, #24
 800057e:	4618      	mov	r0, r3
 8000580:	f001 f910 	bl	80017a4 <HAL_RCC_OscConfig>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <SystemClock_Config+0x50>
  {
    Error_Handler();
 800058a:	f000 f8e7 	bl	800075c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058e:	230f      	movs	r3, #15
 8000590:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000592:	2301      	movs	r3, #1
 8000594:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000596:	2300      	movs	r3, #0
 8000598:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800059a:	2300      	movs	r3, #0
 800059c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f001 fc0e 	bl	8001dc8 <HAL_RCC_ClockConfig>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80005b2:	f000 f8d3 	bl	800075c <Error_Handler>
  }
}
 80005b6:	bf00      	nop
 80005b8:	3750      	adds	r7, #80	; 0x50
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
	...

080005c0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80005d0:	4b15      	ldr	r3, [pc, #84]	; (8000628 <MX_TIM6_Init+0x68>)
 80005d2:	4a16      	ldr	r2, [pc, #88]	; (800062c <MX_TIM6_Init+0x6c>)
 80005d4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1600-1;
 80005d6:	4b14      	ldr	r3, [pc, #80]	; (8000628 <MX_TIM6_Init+0x68>)
 80005d8:	f240 623f 	movw	r2, #1599	; 0x63f
 80005dc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005de:	4b12      	ldr	r3, [pc, #72]	; (8000628 <MX_TIM6_Init+0x68>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 80005e4:	4b10      	ldr	r3, [pc, #64]	; (8000628 <MX_TIM6_Init+0x68>)
 80005e6:	f242 720f 	movw	r2, #9999	; 0x270f
 80005ea:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005ec:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <MX_TIM6_Init+0x68>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80005f2:	480d      	ldr	r0, [pc, #52]	; (8000628 <MX_TIM6_Init+0x68>)
 80005f4:	f002 f840 	bl	8002678 <HAL_TIM_Base_Init>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80005fe:	f000 f8ad 	bl	800075c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000602:	2300      	movs	r3, #0
 8000604:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000606:	2300      	movs	r3, #0
 8000608:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	4619      	mov	r1, r3
 800060e:	4806      	ldr	r0, [pc, #24]	; (8000628 <MX_TIM6_Init+0x68>)
 8000610:	f002 fb1c 	bl	8002c4c <HAL_TIMEx_MasterConfigSynchronization>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800061a:	f000 f89f 	bl	800075c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800061e:	bf00      	nop
 8000620:	3710      	adds	r7, #16
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20000030 	.word	0x20000030
 800062c:	40001000 	.word	0x40001000

08000630 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000634:	4b22      	ldr	r3, [pc, #136]	; (80006c0 <MX_USART3_UART_Init+0x90>)
 8000636:	4a23      	ldr	r2, [pc, #140]	; (80006c4 <MX_USART3_UART_Init+0x94>)
 8000638:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800063a:	4b21      	ldr	r3, [pc, #132]	; (80006c0 <MX_USART3_UART_Init+0x90>)
 800063c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000640:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000642:	4b1f      	ldr	r3, [pc, #124]	; (80006c0 <MX_USART3_UART_Init+0x90>)
 8000644:	2200      	movs	r2, #0
 8000646:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000648:	4b1d      	ldr	r3, [pc, #116]	; (80006c0 <MX_USART3_UART_Init+0x90>)
 800064a:	2200      	movs	r2, #0
 800064c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800064e:	4b1c      	ldr	r3, [pc, #112]	; (80006c0 <MX_USART3_UART_Init+0x90>)
 8000650:	2200      	movs	r2, #0
 8000652:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000654:	4b1a      	ldr	r3, [pc, #104]	; (80006c0 <MX_USART3_UART_Init+0x90>)
 8000656:	220c      	movs	r2, #12
 8000658:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800065a:	4b19      	ldr	r3, [pc, #100]	; (80006c0 <MX_USART3_UART_Init+0x90>)
 800065c:	2200      	movs	r2, #0
 800065e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000660:	4b17      	ldr	r3, [pc, #92]	; (80006c0 <MX_USART3_UART_Init+0x90>)
 8000662:	2200      	movs	r2, #0
 8000664:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000666:	4b16      	ldr	r3, [pc, #88]	; (80006c0 <MX_USART3_UART_Init+0x90>)
 8000668:	2200      	movs	r2, #0
 800066a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800066c:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <MX_USART3_UART_Init+0x90>)
 800066e:	2200      	movs	r2, #0
 8000670:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000672:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <MX_USART3_UART_Init+0x90>)
 8000674:	2200      	movs	r2, #0
 8000676:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000678:	4811      	ldr	r0, [pc, #68]	; (80006c0 <MX_USART3_UART_Init+0x90>)
 800067a:	f002 fbbb 	bl	8002df4 <HAL_UART_Init>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000684:	f000 f86a 	bl	800075c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000688:	2100      	movs	r1, #0
 800068a:	480d      	ldr	r0, [pc, #52]	; (80006c0 <MX_USART3_UART_Init+0x90>)
 800068c:	f004 fdb1 	bl	80051f2 <HAL_UARTEx_SetTxFifoThreshold>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000696:	f000 f861 	bl	800075c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800069a:	2100      	movs	r1, #0
 800069c:	4808      	ldr	r0, [pc, #32]	; (80006c0 <MX_USART3_UART_Init+0x90>)
 800069e:	f004 fde6 	bl	800526e <HAL_UARTEx_SetRxFifoThreshold>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80006a8:	f000 f858 	bl	800075c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80006ac:	4804      	ldr	r0, [pc, #16]	; (80006c0 <MX_USART3_UART_Init+0x90>)
 80006ae:	f004 fd67 	bl	8005180 <HAL_UARTEx_DisableFifoMode>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80006b8:	f000 f850 	bl	800075c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	2000007c 	.word	0x2000007c
 80006c4:	40004800 	.word	0x40004800

080006c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80006ce:	4b16      	ldr	r3, [pc, #88]	; (8000728 <MX_DMA_Init+0x60>)
 80006d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006d2:	4a15      	ldr	r2, [pc, #84]	; (8000728 <MX_DMA_Init+0x60>)
 80006d4:	f043 0304 	orr.w	r3, r3, #4
 80006d8:	6493      	str	r3, [r2, #72]	; 0x48
 80006da:	4b13      	ldr	r3, [pc, #76]	; (8000728 <MX_DMA_Init+0x60>)
 80006dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006de:	f003 0304 	and.w	r3, r3, #4
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006e6:	4b10      	ldr	r3, [pc, #64]	; (8000728 <MX_DMA_Init+0x60>)
 80006e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006ea:	4a0f      	ldr	r2, [pc, #60]	; (8000728 <MX_DMA_Init+0x60>)
 80006ec:	f043 0301 	orr.w	r3, r3, #1
 80006f0:	6493      	str	r3, [r2, #72]	; 0x48
 80006f2:	4b0d      	ldr	r3, [pc, #52]	; (8000728 <MX_DMA_Init+0x60>)
 80006f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	603b      	str	r3, [r7, #0]
 80006fc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80006fe:	2200      	movs	r2, #0
 8000700:	2100      	movs	r1, #0
 8000702:	200b      	movs	r0, #11
 8000704:	f000 fb79 	bl	8000dfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000708:	200b      	movs	r0, #11
 800070a:	f000 fb90 	bl	8000e2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800070e:	2200      	movs	r2, #0
 8000710:	2100      	movs	r1, #0
 8000712:	200c      	movs	r0, #12
 8000714:	f000 fb71 	bl	8000dfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000718:	200c      	movs	r0, #12
 800071a:	f000 fb88 	bl	8000e2e <HAL_NVIC_EnableIRQ>

}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40021000 	.word	0x40021000

0800072c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000732:	4b09      	ldr	r3, [pc, #36]	; (8000758 <MX_GPIO_Init+0x2c>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000736:	4a08      	ldr	r2, [pc, #32]	; (8000758 <MX_GPIO_Init+0x2c>)
 8000738:	f043 0302 	orr.w	r3, r3, #2
 800073c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800073e:	4b06      	ldr	r3, [pc, #24]	; (8000758 <MX_GPIO_Init+0x2c>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000742:	f003 0302 	and.w	r3, r3, #2
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]

}
 800074a:	bf00      	nop
 800074c:	370c      	adds	r7, #12
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	40021000 	.word	0x40021000

0800075c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000760:	b672      	cpsid	i
}
 8000762:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000764:	e7fe      	b.n	8000764 <Error_Handler+0x8>
	...

08000768 <_Z5setupv>:
uint8_t text[5]={'h','e','l','l','o'};
uint8_t text_from_arduino[10];
extern TIM_HandleTypeDef htim6;
extern UART_HandleTypeDef huart3;

void setup(){
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart3, text, sizeof(text));
 800076c:	2205      	movs	r2, #5
 800076e:	4904      	ldr	r1, [pc, #16]	; (8000780 <_Z5setupv+0x18>)
 8000770:	4804      	ldr	r0, [pc, #16]	; (8000784 <_Z5setupv+0x1c>)
 8000772:	f002 fc23 	bl	8002fbc <HAL_UART_Receive_IT>
	HAL_TIM_Base_Start_IT(&htim6);
 8000776:	4804      	ldr	r0, [pc, #16]	; (8000788 <_Z5setupv+0x20>)
 8000778:	f001 ffd6 	bl	8002728 <HAL_TIM_Base_Start_IT>
}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20000000 	.word	0x20000000
 8000784:	2000007c 	.word	0x2000007c
 8000788:	20000030 	.word	0x20000030

0800078c <main_function>:

void main_function(){
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
	setup();
 8000790:	f7ff ffea 	bl	8000768 <_Z5setupv>
//	HAL_UART_Receive_IT(&huart3,text_from_arduino,sizeof(text_from_arduino));
	while(1){
 8000794:	e7fe      	b.n	8000794 <main_function+0x8>
	...

08000798 <HAL_UART_RxCpltCallback>:
//			counter++;
//		}
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef*huart){
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
	if(huart -> Instance == USART3){
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a08      	ldr	r2, [pc, #32]	; (80007c8 <HAL_UART_RxCpltCallback+0x30>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d109      	bne.n	80007be <HAL_UART_RxCpltCallback+0x26>
	    HAL_UART_Receive_IT(&huart3, text_from_arduino, sizeof(text_from_arduino));
 80007aa:	220a      	movs	r2, #10
 80007ac:	4907      	ldr	r1, [pc, #28]	; (80007cc <HAL_UART_RxCpltCallback+0x34>)
 80007ae:	4808      	ldr	r0, [pc, #32]	; (80007d0 <HAL_UART_RxCpltCallback+0x38>)
 80007b0:	f002 fc04 	bl	8002fbc <HAL_UART_Receive_IT>
		r++;
 80007b4:	4b07      	ldr	r3, [pc, #28]	; (80007d4 <HAL_UART_RxCpltCallback+0x3c>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	3301      	adds	r3, #1
 80007ba:	4a06      	ldr	r2, [pc, #24]	; (80007d4 <HAL_UART_RxCpltCallback+0x3c>)
 80007bc:	6013      	str	r3, [r2, #0]
	}
}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40004800 	.word	0x40004800
 80007cc:	200001d8 	.word	0x200001d8
 80007d0:	2000007c 	.word	0x2000007c
 80007d4:	200001d0 	.word	0x200001d0

080007d8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
	if(huart -> Instance == USART3){
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a06      	ldr	r2, [pc, #24]	; (8000800 <HAL_UART_TxCpltCallback+0x28>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d104      	bne.n	80007f4 <HAL_UART_TxCpltCallback+0x1c>
		t++;
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <HAL_UART_TxCpltCallback+0x2c>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	3301      	adds	r3, #1
 80007f0:	4a04      	ldr	r2, [pc, #16]	; (8000804 <HAL_UART_TxCpltCallback+0x2c>)
 80007f2:	6013      	str	r3, [r2, #0]
	}
}
 80007f4:	bf00      	nop
 80007f6:	370c      	adds	r7, #12
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr
 8000800:	40004800 	.word	0x40004800
 8000804:	200001d4 	.word	0x200001d4

08000808 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM6){
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a05      	ldr	r2, [pc, #20]	; (800082c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d104      	bne.n	8000824 <HAL_TIM_PeriodElapsedCallback+0x1c>
		HAL_UART_Transmit_IT(&huart3, text, sizeof(text));
 800081a:	2205      	movs	r2, #5
 800081c:	4904      	ldr	r1, [pc, #16]	; (8000830 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800081e:	4805      	ldr	r0, [pc, #20]	; (8000834 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000820:	f002 fb38 	bl	8002e94 <HAL_UART_Transmit_IT>
//		counter++;
	}
}
 8000824:	bf00      	nop
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40001000 	.word	0x40001000
 8000830:	20000000 	.word	0x20000000
 8000834:	2000007c 	.word	0x2000007c

08000838 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083e:	4b0f      	ldr	r3, [pc, #60]	; (800087c <HAL_MspInit+0x44>)
 8000840:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000842:	4a0e      	ldr	r2, [pc, #56]	; (800087c <HAL_MspInit+0x44>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	6613      	str	r3, [r2, #96]	; 0x60
 800084a:	4b0c      	ldr	r3, [pc, #48]	; (800087c <HAL_MspInit+0x44>)
 800084c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000856:	4b09      	ldr	r3, [pc, #36]	; (800087c <HAL_MspInit+0x44>)
 8000858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800085a:	4a08      	ldr	r2, [pc, #32]	; (800087c <HAL_MspInit+0x44>)
 800085c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000860:	6593      	str	r3, [r2, #88]	; 0x58
 8000862:	4b06      	ldr	r3, [pc, #24]	; (800087c <HAL_MspInit+0x44>)
 8000864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800086a:	603b      	str	r3, [r7, #0]
 800086c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800086e:	bf00      	nop
 8000870:	370c      	adds	r7, #12
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	40021000 	.word	0x40021000

08000880 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a0d      	ldr	r2, [pc, #52]	; (80008c4 <HAL_TIM_Base_MspInit+0x44>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d113      	bne.n	80008ba <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000892:	4b0d      	ldr	r3, [pc, #52]	; (80008c8 <HAL_TIM_Base_MspInit+0x48>)
 8000894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000896:	4a0c      	ldr	r2, [pc, #48]	; (80008c8 <HAL_TIM_Base_MspInit+0x48>)
 8000898:	f043 0310 	orr.w	r3, r3, #16
 800089c:	6593      	str	r3, [r2, #88]	; 0x58
 800089e:	4b0a      	ldr	r3, [pc, #40]	; (80008c8 <HAL_TIM_Base_MspInit+0x48>)
 80008a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008a2:	f003 0310 	and.w	r3, r3, #16
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2100      	movs	r1, #0
 80008ae:	2036      	movs	r0, #54	; 0x36
 80008b0:	f000 faa3 	bl	8000dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80008b4:	2036      	movs	r0, #54	; 0x36
 80008b6:	f000 faba 	bl	8000e2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80008ba:	bf00      	nop
 80008bc:	3710      	adds	r7, #16
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40001000 	.word	0x40001000
 80008c8:	40021000 	.word	0x40021000

080008cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b09e      	sub	sp, #120	; 0x78
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	2250      	movs	r2, #80	; 0x50
 80008ea:	2100      	movs	r1, #0
 80008ec:	4618      	mov	r0, r3
 80008ee:	f004 fd6f 	bl	80053d0 <memset>
  if(huart->Instance==USART3)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a4d      	ldr	r2, [pc, #308]	; (8000a2c <HAL_UART_MspInit+0x160>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	f040 8092 	bne.w	8000a22 <HAL_UART_MspInit+0x156>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80008fe:	2304      	movs	r3, #4
 8000900:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000902:	2300      	movs	r3, #0
 8000904:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	4618      	mov	r0, r3
 800090c:	f001 fc78 	bl	8002200 <HAL_RCCEx_PeriphCLKConfig>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000916:	f7ff ff21 	bl	800075c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800091a:	4b45      	ldr	r3, [pc, #276]	; (8000a30 <HAL_UART_MspInit+0x164>)
 800091c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800091e:	4a44      	ldr	r2, [pc, #272]	; (8000a30 <HAL_UART_MspInit+0x164>)
 8000920:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000924:	6593      	str	r3, [r2, #88]	; 0x58
 8000926:	4b42      	ldr	r3, [pc, #264]	; (8000a30 <HAL_UART_MspInit+0x164>)
 8000928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800092a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800092e:	613b      	str	r3, [r7, #16]
 8000930:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000932:	4b3f      	ldr	r3, [pc, #252]	; (8000a30 <HAL_UART_MspInit+0x164>)
 8000934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000936:	4a3e      	ldr	r2, [pc, #248]	; (8000a30 <HAL_UART_MspInit+0x164>)
 8000938:	f043 0302 	orr.w	r3, r3, #2
 800093c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800093e:	4b3c      	ldr	r3, [pc, #240]	; (8000a30 <HAL_UART_MspInit+0x164>)
 8000940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000942:	f003 0302 	and.w	r3, r3, #2
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800094a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800094e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000950:	2302      	movs	r3, #2
 8000952:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000958:	2300      	movs	r3, #0
 800095a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800095c:	2307      	movs	r3, #7
 800095e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000960:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000964:	4619      	mov	r1, r3
 8000966:	4833      	ldr	r0, [pc, #204]	; (8000a34 <HAL_UART_MspInit+0x168>)
 8000968:	f000 fcf6 	bl	8001358 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel1;
 800096c:	4b32      	ldr	r3, [pc, #200]	; (8000a38 <HAL_UART_MspInit+0x16c>)
 800096e:	4a33      	ldr	r2, [pc, #204]	; (8000a3c <HAL_UART_MspInit+0x170>)
 8000970:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8000972:	4b31      	ldr	r3, [pc, #196]	; (8000a38 <HAL_UART_MspInit+0x16c>)
 8000974:	221c      	movs	r2, #28
 8000976:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000978:	4b2f      	ldr	r3, [pc, #188]	; (8000a38 <HAL_UART_MspInit+0x16c>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800097e:	4b2e      	ldr	r3, [pc, #184]	; (8000a38 <HAL_UART_MspInit+0x16c>)
 8000980:	2200      	movs	r2, #0
 8000982:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000984:	4b2c      	ldr	r3, [pc, #176]	; (8000a38 <HAL_UART_MspInit+0x16c>)
 8000986:	2280      	movs	r2, #128	; 0x80
 8000988:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800098a:	4b2b      	ldr	r3, [pc, #172]	; (8000a38 <HAL_UART_MspInit+0x16c>)
 800098c:	2200      	movs	r2, #0
 800098e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000990:	4b29      	ldr	r3, [pc, #164]	; (8000a38 <HAL_UART_MspInit+0x16c>)
 8000992:	2200      	movs	r2, #0
 8000994:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000996:	4b28      	ldr	r3, [pc, #160]	; (8000a38 <HAL_UART_MspInit+0x16c>)
 8000998:	2200      	movs	r2, #0
 800099a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800099c:	4b26      	ldr	r3, [pc, #152]	; (8000a38 <HAL_UART_MspInit+0x16c>)
 800099e:	2200      	movs	r2, #0
 80009a0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80009a2:	4825      	ldr	r0, [pc, #148]	; (8000a38 <HAL_UART_MspInit+0x16c>)
 80009a4:	f000 fa5e 	bl	8000e64 <HAL_DMA_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 80009ae:	f7ff fed5 	bl	800075c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4a20      	ldr	r2, [pc, #128]	; (8000a38 <HAL_UART_MspInit+0x16c>)
 80009b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80009ba:	4a1f      	ldr	r2, [pc, #124]	; (8000a38 <HAL_UART_MspInit+0x16c>)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 80009c0:	4b1f      	ldr	r3, [pc, #124]	; (8000a40 <HAL_UART_MspInit+0x174>)
 80009c2:	4a20      	ldr	r2, [pc, #128]	; (8000a44 <HAL_UART_MspInit+0x178>)
 80009c4:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80009c6:	4b1e      	ldr	r3, [pc, #120]	; (8000a40 <HAL_UART_MspInit+0x174>)
 80009c8:	221d      	movs	r2, #29
 80009ca:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009cc:	4b1c      	ldr	r3, [pc, #112]	; (8000a40 <HAL_UART_MspInit+0x174>)
 80009ce:	2210      	movs	r2, #16
 80009d0:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009d2:	4b1b      	ldr	r3, [pc, #108]	; (8000a40 <HAL_UART_MspInit+0x174>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009d8:	4b19      	ldr	r3, [pc, #100]	; (8000a40 <HAL_UART_MspInit+0x174>)
 80009da:	2280      	movs	r2, #128	; 0x80
 80009dc:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009de:	4b18      	ldr	r3, [pc, #96]	; (8000a40 <HAL_UART_MspInit+0x174>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009e4:	4b16      	ldr	r3, [pc, #88]	; (8000a40 <HAL_UART_MspInit+0x174>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80009ea:	4b15      	ldr	r3, [pc, #84]	; (8000a40 <HAL_UART_MspInit+0x174>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80009f0:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <HAL_UART_MspInit+0x174>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80009f6:	4812      	ldr	r0, [pc, #72]	; (8000a40 <HAL_UART_MspInit+0x174>)
 80009f8:	f000 fa34 	bl	8000e64 <HAL_DMA_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8000a02:	f7ff feab 	bl	800075c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4a0d      	ldr	r2, [pc, #52]	; (8000a40 <HAL_UART_MspInit+0x174>)
 8000a0a:	67da      	str	r2, [r3, #124]	; 0x7c
 8000a0c:	4a0c      	ldr	r2, [pc, #48]	; (8000a40 <HAL_UART_MspInit+0x174>)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2100      	movs	r1, #0
 8000a16:	2027      	movs	r0, #39	; 0x27
 8000a18:	f000 f9ef 	bl	8000dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000a1c:	2027      	movs	r0, #39	; 0x27
 8000a1e:	f000 fa06 	bl	8000e2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a22:	bf00      	nop
 8000a24:	3778      	adds	r7, #120	; 0x78
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40004800 	.word	0x40004800
 8000a30:	40021000 	.word	0x40021000
 8000a34:	48000400 	.word	0x48000400
 8000a38:	20000110 	.word	0x20000110
 8000a3c:	40020008 	.word	0x40020008
 8000a40:	20000170 	.word	0x20000170
 8000a44:	4002001c 	.word	0x4002001c

08000a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <NMI_Handler+0x4>

08000a4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a52:	e7fe      	b.n	8000a52 <HardFault_Handler+0x4>

08000a54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <MemManage_Handler+0x4>

08000a5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a5e:	e7fe      	b.n	8000a5e <BusFault_Handler+0x4>

08000a60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <UsageFault_Handler+0x4>

08000a66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr

08000a74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a94:	f000 f8b8 	bl	8000c08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000aa0:	4802      	ldr	r0, [pc, #8]	; (8000aac <DMA1_Channel1_IRQHandler+0x10>)
 8000aa2:	f000 fb47 	bl	8001134 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20000110 	.word	0x20000110

08000ab0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000ab4:	4802      	ldr	r0, [pc, #8]	; (8000ac0 <DMA1_Channel2_IRQHandler+0x10>)
 8000ab6:	f000 fb3d 	bl	8001134 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	20000170 	.word	0x20000170

08000ac4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000ac8:	4802      	ldr	r0, [pc, #8]	; (8000ad4 <USART3_IRQHandler+0x10>)
 8000aca:	f002 fac3 	bl	8003054 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	2000007c 	.word	0x2000007c

08000ad8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000adc:	4802      	ldr	r0, [pc, #8]	; (8000ae8 <TIM6_DAC_IRQHandler+0x10>)
 8000ade:	f001 fe93 	bl	8002808 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000030 	.word	0x20000030

08000aec <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000af0:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <SystemInit+0x20>)
 8000af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000af6:	4a05      	ldr	r2, [pc, #20]	; (8000b0c <SystemInit+0x20>)
 8000af8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000afc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b10:	480d      	ldr	r0, [pc, #52]	; (8000b48 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b12:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b14:	f7ff ffea 	bl	8000aec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b18:	480c      	ldr	r0, [pc, #48]	; (8000b4c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b1a:	490d      	ldr	r1, [pc, #52]	; (8000b50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b1c:	4a0d      	ldr	r2, [pc, #52]	; (8000b54 <LoopForever+0xe>)
  movs r3, #0
 8000b1e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b20:	e002      	b.n	8000b28 <LoopCopyDataInit>

08000b22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b26:	3304      	adds	r3, #4

08000b28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b2c:	d3f9      	bcc.n	8000b22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b2e:	4a0a      	ldr	r2, [pc, #40]	; (8000b58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b30:	4c0a      	ldr	r4, [pc, #40]	; (8000b5c <LoopForever+0x16>)
  movs r3, #0
 8000b32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b34:	e001      	b.n	8000b3a <LoopFillZerobss>

08000b36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b38:	3204      	adds	r2, #4

08000b3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b3c:	d3fb      	bcc.n	8000b36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b3e:	f004 fc23 	bl	8005388 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b42:	f7ff fceb 	bl	800051c <main>

08000b46 <LoopForever>:

LoopForever:
    b LoopForever
 8000b46:	e7fe      	b.n	8000b46 <LoopForever>
  ldr   r0, =_estack
 8000b48:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8000b4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b50:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000b54:	08005448 	.word	0x08005448
  ldr r2, =_sbss
 8000b58:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000b5c:	200001e8 	.word	0x200001e8

08000b60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b60:	e7fe      	b.n	8000b60 <ADC1_2_IRQHandler>

08000b62 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b082      	sub	sp, #8
 8000b66:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b6c:	2003      	movs	r0, #3
 8000b6e:	f000 f939 	bl	8000de4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b72:	200f      	movs	r0, #15
 8000b74:	f000 f80e 	bl	8000b94 <HAL_InitTick>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d002      	beq.n	8000b84 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	71fb      	strb	r3, [r7, #7]
 8000b82:	e001      	b.n	8000b88 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b84:	f7ff fe58 	bl	8000838 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b88:	79fb      	ldrb	r3, [r7, #7]

}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
	...

08000b94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ba0:	4b16      	ldr	r3, [pc, #88]	; (8000bfc <HAL_InitTick+0x68>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d022      	beq.n	8000bee <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ba8:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <HAL_InitTick+0x6c>)
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	4b13      	ldr	r3, [pc, #76]	; (8000bfc <HAL_InitTick+0x68>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000bb4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f000 f944 	bl	8000e4a <HAL_SYSTICK_Config>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d10f      	bne.n	8000be8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2b0f      	cmp	r3, #15
 8000bcc:	d809      	bhi.n	8000be2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	6879      	ldr	r1, [r7, #4]
 8000bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd6:	f000 f910 	bl	8000dfa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bda:	4a0a      	ldr	r2, [pc, #40]	; (8000c04 <HAL_InitTick+0x70>)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	6013      	str	r3, [r2, #0]
 8000be0:	e007      	b.n	8000bf2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
 8000be4:	73fb      	strb	r3, [r7, #15]
 8000be6:	e004      	b.n	8000bf2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000be8:	2301      	movs	r3, #1
 8000bea:	73fb      	strb	r3, [r7, #15]
 8000bec:	e001      	b.n	8000bf2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20000010 	.word	0x20000010
 8000c00:	20000008 	.word	0x20000008
 8000c04:	2000000c 	.word	0x2000000c

08000c08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c0c:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <HAL_IncTick+0x1c>)
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <HAL_IncTick+0x20>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4413      	add	r3, r2
 8000c16:	4a03      	ldr	r2, [pc, #12]	; (8000c24 <HAL_IncTick+0x1c>)
 8000c18:	6013      	str	r3, [r2, #0]
}
 8000c1a:	bf00      	nop
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	200001e4 	.word	0x200001e4
 8000c28:	20000010 	.word	0x20000010

08000c2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c30:	4b03      	ldr	r3, [pc, #12]	; (8000c40 <HAL_GetTick+0x14>)
 8000c32:	681b      	ldr	r3, [r3, #0]
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	200001e4 	.word	0x200001e4

08000c44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	f003 0307 	and.w	r3, r3, #7
 8000c52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c54:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <__NVIC_SetPriorityGrouping+0x44>)
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c5a:	68ba      	ldr	r2, [r7, #8]
 8000c5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c60:	4013      	ands	r3, r2
 8000c62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c76:	4a04      	ldr	r2, [pc, #16]	; (8000c88 <__NVIC_SetPriorityGrouping+0x44>)
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	60d3      	str	r3, [r2, #12]
}
 8000c7c:	bf00      	nop
 8000c7e:	3714      	adds	r7, #20
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c90:	4b04      	ldr	r3, [pc, #16]	; (8000ca4 <__NVIC_GetPriorityGrouping+0x18>)
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	0a1b      	lsrs	r3, r3, #8
 8000c96:	f003 0307 	and.w	r3, r3, #7
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db0b      	blt.n	8000cd2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	f003 021f 	and.w	r2, r3, #31
 8000cc0:	4907      	ldr	r1, [pc, #28]	; (8000ce0 <__NVIC_EnableIRQ+0x38>)
 8000cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc6:	095b      	lsrs	r3, r3, #5
 8000cc8:	2001      	movs	r0, #1
 8000cca:	fa00 f202 	lsl.w	r2, r0, r2
 8000cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cd2:	bf00      	nop
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	e000e100 	.word	0xe000e100

08000ce4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	6039      	str	r1, [r7, #0]
 8000cee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	db0a      	blt.n	8000d0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	b2da      	uxtb	r2, r3
 8000cfc:	490c      	ldr	r1, [pc, #48]	; (8000d30 <__NVIC_SetPriority+0x4c>)
 8000cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d02:	0112      	lsls	r2, r2, #4
 8000d04:	b2d2      	uxtb	r2, r2
 8000d06:	440b      	add	r3, r1
 8000d08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d0c:	e00a      	b.n	8000d24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	b2da      	uxtb	r2, r3
 8000d12:	4908      	ldr	r1, [pc, #32]	; (8000d34 <__NVIC_SetPriority+0x50>)
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	f003 030f 	and.w	r3, r3, #15
 8000d1a:	3b04      	subs	r3, #4
 8000d1c:	0112      	lsls	r2, r2, #4
 8000d1e:	b2d2      	uxtb	r2, r2
 8000d20:	440b      	add	r3, r1
 8000d22:	761a      	strb	r2, [r3, #24]
}
 8000d24:	bf00      	nop
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	e000e100 	.word	0xe000e100
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b089      	sub	sp, #36	; 0x24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	f003 0307 	and.w	r3, r3, #7
 8000d4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	f1c3 0307 	rsb	r3, r3, #7
 8000d52:	2b04      	cmp	r3, #4
 8000d54:	bf28      	it	cs
 8000d56:	2304      	movcs	r3, #4
 8000d58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	3304      	adds	r3, #4
 8000d5e:	2b06      	cmp	r3, #6
 8000d60:	d902      	bls.n	8000d68 <NVIC_EncodePriority+0x30>
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	3b03      	subs	r3, #3
 8000d66:	e000      	b.n	8000d6a <NVIC_EncodePriority+0x32>
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	fa02 f303 	lsl.w	r3, r2, r3
 8000d76:	43da      	mvns	r2, r3
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	401a      	ands	r2, r3
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d80:	f04f 31ff 	mov.w	r1, #4294967295
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8a:	43d9      	mvns	r1, r3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d90:	4313      	orrs	r3, r2
         );
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3724      	adds	r7, #36	; 0x24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
	...

08000da0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	3b01      	subs	r3, #1
 8000dac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000db0:	d301      	bcc.n	8000db6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000db2:	2301      	movs	r3, #1
 8000db4:	e00f      	b.n	8000dd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000db6:	4a0a      	ldr	r2, [pc, #40]	; (8000de0 <SysTick_Config+0x40>)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3b01      	subs	r3, #1
 8000dbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dbe:	210f      	movs	r1, #15
 8000dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc4:	f7ff ff8e 	bl	8000ce4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dc8:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <SysTick_Config+0x40>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dce:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <SysTick_Config+0x40>)
 8000dd0:	2207      	movs	r2, #7
 8000dd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dd4:	2300      	movs	r3, #0
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	e000e010 	.word	0xe000e010

08000de4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	f7ff ff29 	bl	8000c44 <__NVIC_SetPriorityGrouping>
}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b086      	sub	sp, #24
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	4603      	mov	r3, r0
 8000e02:	60b9      	str	r1, [r7, #8]
 8000e04:	607a      	str	r2, [r7, #4]
 8000e06:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e08:	f7ff ff40 	bl	8000c8c <__NVIC_GetPriorityGrouping>
 8000e0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	68b9      	ldr	r1, [r7, #8]
 8000e12:	6978      	ldr	r0, [r7, #20]
 8000e14:	f7ff ff90 	bl	8000d38 <NVIC_EncodePriority>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e1e:	4611      	mov	r1, r2
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff ff5f 	bl	8000ce4 <__NVIC_SetPriority>
}
 8000e26:	bf00      	nop
 8000e28:	3718      	adds	r7, #24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b082      	sub	sp, #8
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	4603      	mov	r3, r0
 8000e36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff ff33 	bl	8000ca8 <__NVIC_EnableIRQ>
}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b082      	sub	sp, #8
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f7ff ffa4 	bl	8000da0 <SysTick_Config>
 8000e58:	4603      	mov	r3, r0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
	...

08000e64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d101      	bne.n	8000e76 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
 8000e74:	e08d      	b.n	8000f92 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	4b47      	ldr	r3, [pc, #284]	; (8000f9c <HAL_DMA_Init+0x138>)
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d80f      	bhi.n	8000ea2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	461a      	mov	r2, r3
 8000e88:	4b45      	ldr	r3, [pc, #276]	; (8000fa0 <HAL_DMA_Init+0x13c>)
 8000e8a:	4413      	add	r3, r2
 8000e8c:	4a45      	ldr	r2, [pc, #276]	; (8000fa4 <HAL_DMA_Init+0x140>)
 8000e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e92:	091b      	lsrs	r3, r3, #4
 8000e94:	009a      	lsls	r2, r3, #2
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a42      	ldr	r2, [pc, #264]	; (8000fa8 <HAL_DMA_Init+0x144>)
 8000e9e:	641a      	str	r2, [r3, #64]	; 0x40
 8000ea0:	e00e      	b.n	8000ec0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	4b40      	ldr	r3, [pc, #256]	; (8000fac <HAL_DMA_Init+0x148>)
 8000eaa:	4413      	add	r3, r2
 8000eac:	4a3d      	ldr	r2, [pc, #244]	; (8000fa4 <HAL_DMA_Init+0x140>)
 8000eae:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb2:	091b      	lsrs	r3, r3, #4
 8000eb4:	009a      	lsls	r2, r3, #2
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4a3c      	ldr	r2, [pc, #240]	; (8000fb0 <HAL_DMA_Init+0x14c>)
 8000ebe:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2202      	movs	r2, #2
 8000ec4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000eda:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000ee4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	691b      	ldr	r3, [r3, #16]
 8000eea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ef0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	699b      	ldr	r3, [r3, #24]
 8000ef6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000efc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6a1b      	ldr	r3, [r3, #32]
 8000f02:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000f04:	68fa      	ldr	r2, [r7, #12]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	68fa      	ldr	r2, [r7, #12]
 8000f10:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f000 f9be 	bl	8001294 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000f20:	d102      	bne.n	8000f28 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2200      	movs	r2, #0
 8000f26:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	685a      	ldr	r2, [r3, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f30:	b2d2      	uxtb	r2, r2
 8000f32:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f38:	687a      	ldr	r2, [r7, #4]
 8000f3a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000f3c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d010      	beq.n	8000f68 <HAL_DMA_Init+0x104>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	2b04      	cmp	r3, #4
 8000f4c:	d80c      	bhi.n	8000f68 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f000 f9de 	bl	8001310 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	e008      	b.n	8000f7a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2200      	movs	r2, #0
 8000f72:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2200      	movs	r2, #0
 8000f78:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2201      	movs	r2, #1
 8000f84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40020407 	.word	0x40020407
 8000fa0:	bffdfff8 	.word	0xbffdfff8
 8000fa4:	cccccccd 	.word	0xcccccccd
 8000fa8:	40020000 	.word	0x40020000
 8000fac:	bffdfbf8 	.word	0xbffdfbf8
 8000fb0:	40020400 	.word	0x40020400

08000fb4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d005      	beq.n	8000fd8 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2204      	movs	r2, #4
 8000fd0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	73fb      	strb	r3, [r7, #15]
 8000fd6:	e037      	b.n	8001048 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f022 020e 	bic.w	r2, r2, #14
 8000fe6:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ff2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000ff6:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f022 0201 	bic.w	r2, r2, #1
 8001006:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100c:	f003 021f 	and.w	r2, r3, #31
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001014:	2101      	movs	r1, #1
 8001016:	fa01 f202 	lsl.w	r2, r1, r2
 800101a:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001024:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800102a:	2b00      	cmp	r3, #0
 800102c:	d00c      	beq.n	8001048 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001038:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800103c:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001046:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2201      	movs	r2, #1
 800104c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2200      	movs	r2, #0
 8001054:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001058:	7bfb      	ldrb	r3, [r7, #15]
}
 800105a:	4618      	mov	r0, r3
 800105c:	3714      	adds	r7, #20
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr

08001066 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b084      	sub	sp, #16
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800106e:	2300      	movs	r3, #0
 8001070:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001078:	b2db      	uxtb	r3, r3
 800107a:	2b02      	cmp	r3, #2
 800107c:	d00d      	beq.n	800109a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2204      	movs	r2, #4
 8001082:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2201      	movs	r2, #1
 8001088:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2200      	movs	r2, #0
 8001090:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	73fb      	strb	r3, [r7, #15]
 8001098:	e047      	b.n	800112a <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f022 020e 	bic.w	r2, r2, #14
 80010a8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f022 0201 	bic.w	r2, r2, #1
 80010b8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ce:	f003 021f 	and.w	r2, r3, #31
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d6:	2101      	movs	r1, #1
 80010d8:	fa01 f202 	lsl.w	r2, r1, r2
 80010dc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80010e6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d00c      	beq.n	800110a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010fe:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001108:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2201      	movs	r2, #1
 800110e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2200      	movs	r2, #0
 8001116:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800111e:	2b00      	cmp	r3, #0
 8001120:	d003      	beq.n	800112a <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	4798      	blx	r3
    }
  }
  return status;
 800112a:	7bfb      	ldrb	r3, [r7, #15]
}
 800112c:	4618      	mov	r0, r3
 800112e:	3710      	adds	r7, #16
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001150:	f003 031f 	and.w	r3, r3, #31
 8001154:	2204      	movs	r2, #4
 8001156:	409a      	lsls	r2, r3
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	4013      	ands	r3, r2
 800115c:	2b00      	cmp	r3, #0
 800115e:	d026      	beq.n	80011ae <HAL_DMA_IRQHandler+0x7a>
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	f003 0304 	and.w	r3, r3, #4
 8001166:	2b00      	cmp	r3, #0
 8001168:	d021      	beq.n	80011ae <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f003 0320 	and.w	r3, r3, #32
 8001174:	2b00      	cmp	r3, #0
 8001176:	d107      	bne.n	8001188 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f022 0204 	bic.w	r2, r2, #4
 8001186:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118c:	f003 021f 	and.w	r2, r3, #31
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001194:	2104      	movs	r1, #4
 8001196:	fa01 f202 	lsl.w	r2, r1, r2
 800119a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d071      	beq.n	8001288 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80011ac:	e06c      	b.n	8001288 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b2:	f003 031f 	and.w	r3, r3, #31
 80011b6:	2202      	movs	r2, #2
 80011b8:	409a      	lsls	r2, r3
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	4013      	ands	r3, r2
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d02e      	beq.n	8001220 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	f003 0302 	and.w	r3, r3, #2
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d029      	beq.n	8001220 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0320 	and.w	r3, r3, #32
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d10b      	bne.n	80011f2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f022 020a 	bic.w	r2, r2, #10
 80011e8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2201      	movs	r2, #1
 80011ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f6:	f003 021f 	and.w	r2, r3, #31
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fe:	2102      	movs	r1, #2
 8001200:	fa01 f202 	lsl.w	r2, r1, r2
 8001204:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001212:	2b00      	cmp	r3, #0
 8001214:	d038      	beq.n	8001288 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800121e:	e033      	b.n	8001288 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001224:	f003 031f 	and.w	r3, r3, #31
 8001228:	2208      	movs	r2, #8
 800122a:	409a      	lsls	r2, r3
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	4013      	ands	r3, r2
 8001230:	2b00      	cmp	r3, #0
 8001232:	d02a      	beq.n	800128a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	f003 0308 	and.w	r3, r3, #8
 800123a:	2b00      	cmp	r3, #0
 800123c:	d025      	beq.n	800128a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f022 020e 	bic.w	r2, r2, #14
 800124c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001252:	f003 021f 	and.w	r2, r3, #31
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125a:	2101      	movs	r1, #1
 800125c:	fa01 f202 	lsl.w	r2, r1, r2
 8001260:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2201      	movs	r2, #1
 8001266:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2201      	movs	r2, #1
 800126c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2200      	movs	r2, #0
 8001274:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800127c:	2b00      	cmp	r3, #0
 800127e:	d004      	beq.n	800128a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001288:	bf00      	nop
 800128a:	bf00      	nop
}
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
	...

08001294 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001294:	b480      	push	{r7}
 8001296:	b087      	sub	sp, #28
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	461a      	mov	r2, r3
 80012a2:	4b16      	ldr	r3, [pc, #88]	; (80012fc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d802      	bhi.n	80012ae <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80012a8:	4b15      	ldr	r3, [pc, #84]	; (8001300 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80012aa:	617b      	str	r3, [r7, #20]
 80012ac:	e001      	b.n	80012b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80012ae:	4b15      	ldr	r3, [pc, #84]	; (8001304 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80012b0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	3b08      	subs	r3, #8
 80012be:	4a12      	ldr	r2, [pc, #72]	; (8001308 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80012c0:	fba2 2303 	umull	r2, r3, r2, r3
 80012c4:	091b      	lsrs	r3, r3, #4
 80012c6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012cc:	089b      	lsrs	r3, r3, #2
 80012ce:	009a      	lsls	r2, r3, #2
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	4413      	add	r3, r2
 80012d4:	461a      	mov	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a0b      	ldr	r2, [pc, #44]	; (800130c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80012de:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f003 031f 	and.w	r3, r3, #31
 80012e6:	2201      	movs	r2, #1
 80012e8:	409a      	lsls	r2, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	651a      	str	r2, [r3, #80]	; 0x50
}
 80012ee:	bf00      	nop
 80012f0:	371c      	adds	r7, #28
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	40020407 	.word	0x40020407
 8001300:	40020800 	.word	0x40020800
 8001304:	40020820 	.word	0x40020820
 8001308:	cccccccd 	.word	0xcccccccd
 800130c:	40020880 	.word	0x40020880

08001310 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	b2db      	uxtb	r3, r3
 800131e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001320:	68fa      	ldr	r2, [r7, #12]
 8001322:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001324:	4413      	add	r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	461a      	mov	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a08      	ldr	r2, [pc, #32]	; (8001354 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001332:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	3b01      	subs	r3, #1
 8001338:	f003 031f 	and.w	r3, r3, #31
 800133c:	2201      	movs	r2, #1
 800133e:	409a      	lsls	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001344:	bf00      	nop
 8001346:	3714      	adds	r7, #20
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	1000823f 	.word	0x1000823f
 8001354:	40020940 	.word	0x40020940

08001358 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001358:	b480      	push	{r7}
 800135a:	b087      	sub	sp, #28
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001362:	2300      	movs	r3, #0
 8001364:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001366:	e15a      	b.n	800161e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	2101      	movs	r1, #1
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	fa01 f303 	lsl.w	r3, r1, r3
 8001374:	4013      	ands	r3, r2
 8001376:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2b00      	cmp	r3, #0
 800137c:	f000 814c 	beq.w	8001618 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f003 0303 	and.w	r3, r3, #3
 8001388:	2b01      	cmp	r3, #1
 800138a:	d005      	beq.n	8001398 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001394:	2b02      	cmp	r3, #2
 8001396:	d130      	bne.n	80013fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	2203      	movs	r2, #3
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	43db      	mvns	r3, r3
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	4013      	ands	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	68da      	ldr	r2, [r3, #12]
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	4313      	orrs	r3, r2
 80013c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013ce:	2201      	movs	r2, #1
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	43db      	mvns	r3, r3
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	4013      	ands	r3, r2
 80013dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	091b      	lsrs	r3, r3, #4
 80013e4:	f003 0201 	and.w	r2, r3, #1
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f003 0303 	and.w	r3, r3, #3
 8001402:	2b03      	cmp	r3, #3
 8001404:	d017      	beq.n	8001436 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	2203      	movs	r2, #3
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43db      	mvns	r3, r3
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	4013      	ands	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	689a      	ldr	r2, [r3, #8]
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	4313      	orrs	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f003 0303 	and.w	r3, r3, #3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d123      	bne.n	800148a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	08da      	lsrs	r2, r3, #3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	3208      	adds	r2, #8
 800144a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800144e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	f003 0307 	and.w	r3, r3, #7
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	220f      	movs	r2, #15
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	43db      	mvns	r3, r3
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	4013      	ands	r3, r2
 8001464:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	691a      	ldr	r2, [r3, #16]
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	f003 0307 	and.w	r3, r3, #7
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	4313      	orrs	r3, r2
 800147a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	08da      	lsrs	r2, r3, #3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3208      	adds	r2, #8
 8001484:	6939      	ldr	r1, [r7, #16]
 8001486:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	2203      	movs	r2, #3
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	43db      	mvns	r3, r3
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	4013      	ands	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f003 0203 	and.w	r2, r3, #3
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	f000 80a6 	beq.w	8001618 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014cc:	4b5b      	ldr	r3, [pc, #364]	; (800163c <HAL_GPIO_Init+0x2e4>)
 80014ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014d0:	4a5a      	ldr	r2, [pc, #360]	; (800163c <HAL_GPIO_Init+0x2e4>)
 80014d2:	f043 0301 	orr.w	r3, r3, #1
 80014d6:	6613      	str	r3, [r2, #96]	; 0x60
 80014d8:	4b58      	ldr	r3, [pc, #352]	; (800163c <HAL_GPIO_Init+0x2e4>)
 80014da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014dc:	f003 0301 	and.w	r3, r3, #1
 80014e0:	60bb      	str	r3, [r7, #8]
 80014e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014e4:	4a56      	ldr	r2, [pc, #344]	; (8001640 <HAL_GPIO_Init+0x2e8>)
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	089b      	lsrs	r3, r3, #2
 80014ea:	3302      	adds	r3, #2
 80014ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	f003 0303 	and.w	r3, r3, #3
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	220f      	movs	r2, #15
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	43db      	mvns	r3, r3
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	4013      	ands	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800150e:	d01f      	beq.n	8001550 <HAL_GPIO_Init+0x1f8>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	4a4c      	ldr	r2, [pc, #304]	; (8001644 <HAL_GPIO_Init+0x2ec>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d019      	beq.n	800154c <HAL_GPIO_Init+0x1f4>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4a4b      	ldr	r2, [pc, #300]	; (8001648 <HAL_GPIO_Init+0x2f0>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d013      	beq.n	8001548 <HAL_GPIO_Init+0x1f0>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4a4a      	ldr	r2, [pc, #296]	; (800164c <HAL_GPIO_Init+0x2f4>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d00d      	beq.n	8001544 <HAL_GPIO_Init+0x1ec>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4a49      	ldr	r2, [pc, #292]	; (8001650 <HAL_GPIO_Init+0x2f8>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d007      	beq.n	8001540 <HAL_GPIO_Init+0x1e8>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4a48      	ldr	r2, [pc, #288]	; (8001654 <HAL_GPIO_Init+0x2fc>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d101      	bne.n	800153c <HAL_GPIO_Init+0x1e4>
 8001538:	2305      	movs	r3, #5
 800153a:	e00a      	b.n	8001552 <HAL_GPIO_Init+0x1fa>
 800153c:	2306      	movs	r3, #6
 800153e:	e008      	b.n	8001552 <HAL_GPIO_Init+0x1fa>
 8001540:	2304      	movs	r3, #4
 8001542:	e006      	b.n	8001552 <HAL_GPIO_Init+0x1fa>
 8001544:	2303      	movs	r3, #3
 8001546:	e004      	b.n	8001552 <HAL_GPIO_Init+0x1fa>
 8001548:	2302      	movs	r3, #2
 800154a:	e002      	b.n	8001552 <HAL_GPIO_Init+0x1fa>
 800154c:	2301      	movs	r3, #1
 800154e:	e000      	b.n	8001552 <HAL_GPIO_Init+0x1fa>
 8001550:	2300      	movs	r3, #0
 8001552:	697a      	ldr	r2, [r7, #20]
 8001554:	f002 0203 	and.w	r2, r2, #3
 8001558:	0092      	lsls	r2, r2, #2
 800155a:	4093      	lsls	r3, r2
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	4313      	orrs	r3, r2
 8001560:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001562:	4937      	ldr	r1, [pc, #220]	; (8001640 <HAL_GPIO_Init+0x2e8>)
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	089b      	lsrs	r3, r3, #2
 8001568:	3302      	adds	r3, #2
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001570:	4b39      	ldr	r3, [pc, #228]	; (8001658 <HAL_GPIO_Init+0x300>)
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	43db      	mvns	r3, r3
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	4013      	ands	r3, r2
 800157e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d003      	beq.n	8001594 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800158c:	693a      	ldr	r2, [r7, #16]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	4313      	orrs	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001594:	4a30      	ldr	r2, [pc, #192]	; (8001658 <HAL_GPIO_Init+0x300>)
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800159a:	4b2f      	ldr	r3, [pc, #188]	; (8001658 <HAL_GPIO_Init+0x300>)
 800159c:	68db      	ldr	r3, [r3, #12]
 800159e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	43db      	mvns	r3, r3
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	4013      	ands	r3, r2
 80015a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d003      	beq.n	80015be <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015be:	4a26      	ldr	r2, [pc, #152]	; (8001658 <HAL_GPIO_Init+0x300>)
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80015c4:	4b24      	ldr	r3, [pc, #144]	; (8001658 <HAL_GPIO_Init+0x300>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	43db      	mvns	r3, r3
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	4013      	ands	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d003      	beq.n	80015e8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015e8:	4a1b      	ldr	r2, [pc, #108]	; (8001658 <HAL_GPIO_Init+0x300>)
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80015ee:	4b1a      	ldr	r3, [pc, #104]	; (8001658 <HAL_GPIO_Init+0x300>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	43db      	mvns	r3, r3
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	4013      	ands	r3, r2
 80015fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d003      	beq.n	8001612 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	4313      	orrs	r3, r2
 8001610:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001612:	4a11      	ldr	r2, [pc, #68]	; (8001658 <HAL_GPIO_Init+0x300>)
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	3301      	adds	r3, #1
 800161c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	fa22 f303 	lsr.w	r3, r2, r3
 8001628:	2b00      	cmp	r3, #0
 800162a:	f47f ae9d 	bne.w	8001368 <HAL_GPIO_Init+0x10>
  }
}
 800162e:	bf00      	nop
 8001630:	bf00      	nop
 8001632:	371c      	adds	r7, #28
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	40021000 	.word	0x40021000
 8001640:	40010000 	.word	0x40010000
 8001644:	48000400 	.word	0x48000400
 8001648:	48000800 	.word	0x48000800
 800164c:	48000c00 	.word	0x48000c00
 8001650:	48001000 	.word	0x48001000
 8001654:	48001400 	.word	0x48001400
 8001658:	40010400 	.word	0x40010400

0800165c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d141      	bne.n	80016ee <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800166a:	4b4b      	ldr	r3, [pc, #300]	; (8001798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001672:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001676:	d131      	bne.n	80016dc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001678:	4b47      	ldr	r3, [pc, #284]	; (8001798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800167a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800167e:	4a46      	ldr	r2, [pc, #280]	; (8001798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001680:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001684:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001688:	4b43      	ldr	r3, [pc, #268]	; (8001798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001690:	4a41      	ldr	r2, [pc, #260]	; (8001798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001692:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001696:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001698:	4b40      	ldr	r3, [pc, #256]	; (800179c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2232      	movs	r2, #50	; 0x32
 800169e:	fb02 f303 	mul.w	r3, r2, r3
 80016a2:	4a3f      	ldr	r2, [pc, #252]	; (80017a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80016a4:	fba2 2303 	umull	r2, r3, r2, r3
 80016a8:	0c9b      	lsrs	r3, r3, #18
 80016aa:	3301      	adds	r3, #1
 80016ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016ae:	e002      	b.n	80016b6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	3b01      	subs	r3, #1
 80016b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016b6:	4b38      	ldr	r3, [pc, #224]	; (8001798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016b8:	695b      	ldr	r3, [r3, #20]
 80016ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016c2:	d102      	bne.n	80016ca <HAL_PWREx_ControlVoltageScaling+0x6e>
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1f2      	bne.n	80016b0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016ca:	4b33      	ldr	r3, [pc, #204]	; (8001798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016cc:	695b      	ldr	r3, [r3, #20]
 80016ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016d6:	d158      	bne.n	800178a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e057      	b.n	800178c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016dc:	4b2e      	ldr	r3, [pc, #184]	; (8001798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016e2:	4a2d      	ldr	r2, [pc, #180]	; (8001798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80016ec:	e04d      	b.n	800178a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016f4:	d141      	bne.n	800177a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80016f6:	4b28      	ldr	r3, [pc, #160]	; (8001798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001702:	d131      	bne.n	8001768 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001704:	4b24      	ldr	r3, [pc, #144]	; (8001798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001706:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800170a:	4a23      	ldr	r2, [pc, #140]	; (8001798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800170c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001710:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001714:	4b20      	ldr	r3, [pc, #128]	; (8001798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800171c:	4a1e      	ldr	r2, [pc, #120]	; (8001798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800171e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001722:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001724:	4b1d      	ldr	r3, [pc, #116]	; (800179c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2232      	movs	r2, #50	; 0x32
 800172a:	fb02 f303 	mul.w	r3, r2, r3
 800172e:	4a1c      	ldr	r2, [pc, #112]	; (80017a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001730:	fba2 2303 	umull	r2, r3, r2, r3
 8001734:	0c9b      	lsrs	r3, r3, #18
 8001736:	3301      	adds	r3, #1
 8001738:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800173a:	e002      	b.n	8001742 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	3b01      	subs	r3, #1
 8001740:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001742:	4b15      	ldr	r3, [pc, #84]	; (8001798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001744:	695b      	ldr	r3, [r3, #20]
 8001746:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800174a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800174e:	d102      	bne.n	8001756 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1f2      	bne.n	800173c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001756:	4b10      	ldr	r3, [pc, #64]	; (8001798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001758:	695b      	ldr	r3, [r3, #20]
 800175a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800175e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001762:	d112      	bne.n	800178a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e011      	b.n	800178c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001768:	4b0b      	ldr	r3, [pc, #44]	; (8001798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800176a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800176e:	4a0a      	ldr	r2, [pc, #40]	; (8001798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001774:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001778:	e007      	b.n	800178a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800177a:	4b07      	ldr	r3, [pc, #28]	; (8001798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001782:	4a05      	ldr	r2, [pc, #20]	; (8001798 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001784:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001788:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800178a:	2300      	movs	r3, #0
}
 800178c:	4618      	mov	r0, r3
 800178e:	3714      	adds	r7, #20
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	40007000 	.word	0x40007000
 800179c:	20000008 	.word	0x20000008
 80017a0:	431bde83 	.word	0x431bde83

080017a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b088      	sub	sp, #32
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d101      	bne.n	80017b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e2fe      	b.n	8001db4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d075      	beq.n	80018ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017c2:	4b97      	ldr	r3, [pc, #604]	; (8001a20 <HAL_RCC_OscConfig+0x27c>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f003 030c 	and.w	r3, r3, #12
 80017ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017cc:	4b94      	ldr	r3, [pc, #592]	; (8001a20 <HAL_RCC_OscConfig+0x27c>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	f003 0303 	and.w	r3, r3, #3
 80017d4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	2b0c      	cmp	r3, #12
 80017da:	d102      	bne.n	80017e2 <HAL_RCC_OscConfig+0x3e>
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	2b03      	cmp	r3, #3
 80017e0:	d002      	beq.n	80017e8 <HAL_RCC_OscConfig+0x44>
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	2b08      	cmp	r3, #8
 80017e6:	d10b      	bne.n	8001800 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e8:	4b8d      	ldr	r3, [pc, #564]	; (8001a20 <HAL_RCC_OscConfig+0x27c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d05b      	beq.n	80018ac <HAL_RCC_OscConfig+0x108>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d157      	bne.n	80018ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e2d9      	b.n	8001db4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001808:	d106      	bne.n	8001818 <HAL_RCC_OscConfig+0x74>
 800180a:	4b85      	ldr	r3, [pc, #532]	; (8001a20 <HAL_RCC_OscConfig+0x27c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a84      	ldr	r2, [pc, #528]	; (8001a20 <HAL_RCC_OscConfig+0x27c>)
 8001810:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001814:	6013      	str	r3, [r2, #0]
 8001816:	e01d      	b.n	8001854 <HAL_RCC_OscConfig+0xb0>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001820:	d10c      	bne.n	800183c <HAL_RCC_OscConfig+0x98>
 8001822:	4b7f      	ldr	r3, [pc, #508]	; (8001a20 <HAL_RCC_OscConfig+0x27c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a7e      	ldr	r2, [pc, #504]	; (8001a20 <HAL_RCC_OscConfig+0x27c>)
 8001828:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800182c:	6013      	str	r3, [r2, #0]
 800182e:	4b7c      	ldr	r3, [pc, #496]	; (8001a20 <HAL_RCC_OscConfig+0x27c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a7b      	ldr	r2, [pc, #492]	; (8001a20 <HAL_RCC_OscConfig+0x27c>)
 8001834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001838:	6013      	str	r3, [r2, #0]
 800183a:	e00b      	b.n	8001854 <HAL_RCC_OscConfig+0xb0>
 800183c:	4b78      	ldr	r3, [pc, #480]	; (8001a20 <HAL_RCC_OscConfig+0x27c>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a77      	ldr	r2, [pc, #476]	; (8001a20 <HAL_RCC_OscConfig+0x27c>)
 8001842:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001846:	6013      	str	r3, [r2, #0]
 8001848:	4b75      	ldr	r3, [pc, #468]	; (8001a20 <HAL_RCC_OscConfig+0x27c>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a74      	ldr	r2, [pc, #464]	; (8001a20 <HAL_RCC_OscConfig+0x27c>)
 800184e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001852:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d013      	beq.n	8001884 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800185c:	f7ff f9e6 	bl	8000c2c <HAL_GetTick>
 8001860:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001864:	f7ff f9e2 	bl	8000c2c <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b64      	cmp	r3, #100	; 0x64
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e29e      	b.n	8001db4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001876:	4b6a      	ldr	r3, [pc, #424]	; (8001a20 <HAL_RCC_OscConfig+0x27c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d0f0      	beq.n	8001864 <HAL_RCC_OscConfig+0xc0>
 8001882:	e014      	b.n	80018ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001884:	f7ff f9d2 	bl	8000c2c <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800188c:	f7ff f9ce 	bl	8000c2c <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b64      	cmp	r3, #100	; 0x64
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e28a      	b.n	8001db4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800189e:	4b60      	ldr	r3, [pc, #384]	; (8001a20 <HAL_RCC_OscConfig+0x27c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1f0      	bne.n	800188c <HAL_RCC_OscConfig+0xe8>
 80018aa:	e000      	b.n	80018ae <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d075      	beq.n	80019a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018ba:	4b59      	ldr	r3, [pc, #356]	; (8001a20 <HAL_RCC_OscConfig+0x27c>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f003 030c 	and.w	r3, r3, #12
 80018c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018c4:	4b56      	ldr	r3, [pc, #344]	; (8001a20 <HAL_RCC_OscConfig+0x27c>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	f003 0303 	and.w	r3, r3, #3
 80018cc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	2b0c      	cmp	r3, #12
 80018d2:	d102      	bne.n	80018da <HAL_RCC_OscConfig+0x136>
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d002      	beq.n	80018e0 <HAL_RCC_OscConfig+0x13c>
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	2b04      	cmp	r3, #4
 80018de:	d11f      	bne.n	8001920 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018e0:	4b4f      	ldr	r3, [pc, #316]	; (8001a20 <HAL_RCC_OscConfig+0x27c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d005      	beq.n	80018f8 <HAL_RCC_OscConfig+0x154>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d101      	bne.n	80018f8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e25d      	b.n	8001db4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018f8:	4b49      	ldr	r3, [pc, #292]	; (8001a20 <HAL_RCC_OscConfig+0x27c>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	691b      	ldr	r3, [r3, #16]
 8001904:	061b      	lsls	r3, r3, #24
 8001906:	4946      	ldr	r1, [pc, #280]	; (8001a20 <HAL_RCC_OscConfig+0x27c>)
 8001908:	4313      	orrs	r3, r2
 800190a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800190c:	4b45      	ldr	r3, [pc, #276]	; (8001a24 <HAL_RCC_OscConfig+0x280>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff f93f 	bl	8000b94 <HAL_InitTick>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d043      	beq.n	80019a4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e249      	b.n	8001db4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d023      	beq.n	8001970 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001928:	4b3d      	ldr	r3, [pc, #244]	; (8001a20 <HAL_RCC_OscConfig+0x27c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a3c      	ldr	r2, [pc, #240]	; (8001a20 <HAL_RCC_OscConfig+0x27c>)
 800192e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001932:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001934:	f7ff f97a 	bl	8000c2c <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800193c:	f7ff f976 	bl	8000c2c <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b02      	cmp	r3, #2
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e232      	b.n	8001db4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800194e:	4b34      	ldr	r3, [pc, #208]	; (8001a20 <HAL_RCC_OscConfig+0x27c>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001956:	2b00      	cmp	r3, #0
 8001958:	d0f0      	beq.n	800193c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800195a:	4b31      	ldr	r3, [pc, #196]	; (8001a20 <HAL_RCC_OscConfig+0x27c>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	061b      	lsls	r3, r3, #24
 8001968:	492d      	ldr	r1, [pc, #180]	; (8001a20 <HAL_RCC_OscConfig+0x27c>)
 800196a:	4313      	orrs	r3, r2
 800196c:	604b      	str	r3, [r1, #4]
 800196e:	e01a      	b.n	80019a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001970:	4b2b      	ldr	r3, [pc, #172]	; (8001a20 <HAL_RCC_OscConfig+0x27c>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a2a      	ldr	r2, [pc, #168]	; (8001a20 <HAL_RCC_OscConfig+0x27c>)
 8001976:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800197a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800197c:	f7ff f956 	bl	8000c2c <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001984:	f7ff f952 	bl	8000c2c <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b02      	cmp	r3, #2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e20e      	b.n	8001db4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001996:	4b22      	ldr	r3, [pc, #136]	; (8001a20 <HAL_RCC_OscConfig+0x27c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1f0      	bne.n	8001984 <HAL_RCC_OscConfig+0x1e0>
 80019a2:	e000      	b.n	80019a6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019a4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0308 	and.w	r3, r3, #8
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d041      	beq.n	8001a36 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	695b      	ldr	r3, [r3, #20]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d01c      	beq.n	80019f4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019ba:	4b19      	ldr	r3, [pc, #100]	; (8001a20 <HAL_RCC_OscConfig+0x27c>)
 80019bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019c0:	4a17      	ldr	r2, [pc, #92]	; (8001a20 <HAL_RCC_OscConfig+0x27c>)
 80019c2:	f043 0301 	orr.w	r3, r3, #1
 80019c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ca:	f7ff f92f 	bl	8000c2c <HAL_GetTick>
 80019ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019d0:	e008      	b.n	80019e4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019d2:	f7ff f92b 	bl	8000c2c <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e1e7      	b.n	8001db4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019e4:	4b0e      	ldr	r3, [pc, #56]	; (8001a20 <HAL_RCC_OscConfig+0x27c>)
 80019e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d0ef      	beq.n	80019d2 <HAL_RCC_OscConfig+0x22e>
 80019f2:	e020      	b.n	8001a36 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019f4:	4b0a      	ldr	r3, [pc, #40]	; (8001a20 <HAL_RCC_OscConfig+0x27c>)
 80019f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019fa:	4a09      	ldr	r2, [pc, #36]	; (8001a20 <HAL_RCC_OscConfig+0x27c>)
 80019fc:	f023 0301 	bic.w	r3, r3, #1
 8001a00:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a04:	f7ff f912 	bl	8000c2c <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a0a:	e00d      	b.n	8001a28 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a0c:	f7ff f90e 	bl	8000c2c <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d906      	bls.n	8001a28 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e1ca      	b.n	8001db4 <HAL_RCC_OscConfig+0x610>
 8001a1e:	bf00      	nop
 8001a20:	40021000 	.word	0x40021000
 8001a24:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a28:	4b8c      	ldr	r3, [pc, #560]	; (8001c5c <HAL_RCC_OscConfig+0x4b8>)
 8001a2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1ea      	bne.n	8001a0c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0304 	and.w	r3, r3, #4
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	f000 80a6 	beq.w	8001b90 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a44:	2300      	movs	r3, #0
 8001a46:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001a48:	4b84      	ldr	r3, [pc, #528]	; (8001c5c <HAL_RCC_OscConfig+0x4b8>)
 8001a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d101      	bne.n	8001a58 <HAL_RCC_OscConfig+0x2b4>
 8001a54:	2301      	movs	r3, #1
 8001a56:	e000      	b.n	8001a5a <HAL_RCC_OscConfig+0x2b6>
 8001a58:	2300      	movs	r3, #0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d00d      	beq.n	8001a7a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a5e:	4b7f      	ldr	r3, [pc, #508]	; (8001c5c <HAL_RCC_OscConfig+0x4b8>)
 8001a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a62:	4a7e      	ldr	r2, [pc, #504]	; (8001c5c <HAL_RCC_OscConfig+0x4b8>)
 8001a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a68:	6593      	str	r3, [r2, #88]	; 0x58
 8001a6a:	4b7c      	ldr	r3, [pc, #496]	; (8001c5c <HAL_RCC_OscConfig+0x4b8>)
 8001a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001a76:	2301      	movs	r3, #1
 8001a78:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a7a:	4b79      	ldr	r3, [pc, #484]	; (8001c60 <HAL_RCC_OscConfig+0x4bc>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d118      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a86:	4b76      	ldr	r3, [pc, #472]	; (8001c60 <HAL_RCC_OscConfig+0x4bc>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a75      	ldr	r2, [pc, #468]	; (8001c60 <HAL_RCC_OscConfig+0x4bc>)
 8001a8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a92:	f7ff f8cb 	bl	8000c2c <HAL_GetTick>
 8001a96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a98:	e008      	b.n	8001aac <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a9a:	f7ff f8c7 	bl	8000c2c <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e183      	b.n	8001db4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001aac:	4b6c      	ldr	r3, [pc, #432]	; (8001c60 <HAL_RCC_OscConfig+0x4bc>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d0f0      	beq.n	8001a9a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d108      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x32e>
 8001ac0:	4b66      	ldr	r3, [pc, #408]	; (8001c5c <HAL_RCC_OscConfig+0x4b8>)
 8001ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ac6:	4a65      	ldr	r2, [pc, #404]	; (8001c5c <HAL_RCC_OscConfig+0x4b8>)
 8001ac8:	f043 0301 	orr.w	r3, r3, #1
 8001acc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ad0:	e024      	b.n	8001b1c <HAL_RCC_OscConfig+0x378>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	2b05      	cmp	r3, #5
 8001ad8:	d110      	bne.n	8001afc <HAL_RCC_OscConfig+0x358>
 8001ada:	4b60      	ldr	r3, [pc, #384]	; (8001c5c <HAL_RCC_OscConfig+0x4b8>)
 8001adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ae0:	4a5e      	ldr	r2, [pc, #376]	; (8001c5c <HAL_RCC_OscConfig+0x4b8>)
 8001ae2:	f043 0304 	orr.w	r3, r3, #4
 8001ae6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001aea:	4b5c      	ldr	r3, [pc, #368]	; (8001c5c <HAL_RCC_OscConfig+0x4b8>)
 8001aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001af0:	4a5a      	ldr	r2, [pc, #360]	; (8001c5c <HAL_RCC_OscConfig+0x4b8>)
 8001af2:	f043 0301 	orr.w	r3, r3, #1
 8001af6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001afa:	e00f      	b.n	8001b1c <HAL_RCC_OscConfig+0x378>
 8001afc:	4b57      	ldr	r3, [pc, #348]	; (8001c5c <HAL_RCC_OscConfig+0x4b8>)
 8001afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b02:	4a56      	ldr	r2, [pc, #344]	; (8001c5c <HAL_RCC_OscConfig+0x4b8>)
 8001b04:	f023 0301 	bic.w	r3, r3, #1
 8001b08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b0c:	4b53      	ldr	r3, [pc, #332]	; (8001c5c <HAL_RCC_OscConfig+0x4b8>)
 8001b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b12:	4a52      	ldr	r2, [pc, #328]	; (8001c5c <HAL_RCC_OscConfig+0x4b8>)
 8001b14:	f023 0304 	bic.w	r3, r3, #4
 8001b18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d016      	beq.n	8001b52 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b24:	f7ff f882 	bl	8000c2c <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b2a:	e00a      	b.n	8001b42 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b2c:	f7ff f87e 	bl	8000c2c <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e138      	b.n	8001db4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b42:	4b46      	ldr	r3, [pc, #280]	; (8001c5c <HAL_RCC_OscConfig+0x4b8>)
 8001b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b48:	f003 0302 	and.w	r3, r3, #2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d0ed      	beq.n	8001b2c <HAL_RCC_OscConfig+0x388>
 8001b50:	e015      	b.n	8001b7e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b52:	f7ff f86b 	bl	8000c2c <HAL_GetTick>
 8001b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b58:	e00a      	b.n	8001b70 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b5a:	f7ff f867 	bl	8000c2c <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d901      	bls.n	8001b70 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e121      	b.n	8001db4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b70:	4b3a      	ldr	r3, [pc, #232]	; (8001c5c <HAL_RCC_OscConfig+0x4b8>)
 8001b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1ed      	bne.n	8001b5a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b7e:	7ffb      	ldrb	r3, [r7, #31]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d105      	bne.n	8001b90 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b84:	4b35      	ldr	r3, [pc, #212]	; (8001c5c <HAL_RCC_OscConfig+0x4b8>)
 8001b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b88:	4a34      	ldr	r2, [pc, #208]	; (8001c5c <HAL_RCC_OscConfig+0x4b8>)
 8001b8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b8e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0320 	and.w	r3, r3, #32
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d03c      	beq.n	8001c16 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d01c      	beq.n	8001bde <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ba4:	4b2d      	ldr	r3, [pc, #180]	; (8001c5c <HAL_RCC_OscConfig+0x4b8>)
 8001ba6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001baa:	4a2c      	ldr	r2, [pc, #176]	; (8001c5c <HAL_RCC_OscConfig+0x4b8>)
 8001bac:	f043 0301 	orr.w	r3, r3, #1
 8001bb0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb4:	f7ff f83a 	bl	8000c2c <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bbc:	f7ff f836 	bl	8000c2c <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e0f2      	b.n	8001db4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001bce:	4b23      	ldr	r3, [pc, #140]	; (8001c5c <HAL_RCC_OscConfig+0x4b8>)
 8001bd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bd4:	f003 0302 	and.w	r3, r3, #2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d0ef      	beq.n	8001bbc <HAL_RCC_OscConfig+0x418>
 8001bdc:	e01b      	b.n	8001c16 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001bde:	4b1f      	ldr	r3, [pc, #124]	; (8001c5c <HAL_RCC_OscConfig+0x4b8>)
 8001be0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001be4:	4a1d      	ldr	r2, [pc, #116]	; (8001c5c <HAL_RCC_OscConfig+0x4b8>)
 8001be6:	f023 0301 	bic.w	r3, r3, #1
 8001bea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bee:	f7ff f81d 	bl	8000c2c <HAL_GetTick>
 8001bf2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001bf4:	e008      	b.n	8001c08 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bf6:	f7ff f819 	bl	8000c2c <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d901      	bls.n	8001c08 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e0d5      	b.n	8001db4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c08:	4b14      	ldr	r3, [pc, #80]	; (8001c5c <HAL_RCC_OscConfig+0x4b8>)
 8001c0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1ef      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	69db      	ldr	r3, [r3, #28]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f000 80c9 	beq.w	8001db2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c20:	4b0e      	ldr	r3, [pc, #56]	; (8001c5c <HAL_RCC_OscConfig+0x4b8>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f003 030c 	and.w	r3, r3, #12
 8001c28:	2b0c      	cmp	r3, #12
 8001c2a:	f000 8083 	beq.w	8001d34 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	69db      	ldr	r3, [r3, #28]
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d15e      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c36:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <HAL_RCC_OscConfig+0x4b8>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a08      	ldr	r2, [pc, #32]	; (8001c5c <HAL_RCC_OscConfig+0x4b8>)
 8001c3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c42:	f7fe fff3 	bl	8000c2c <HAL_GetTick>
 8001c46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c48:	e00c      	b.n	8001c64 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c4a:	f7fe ffef 	bl	8000c2c <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d905      	bls.n	8001c64 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e0ab      	b.n	8001db4 <HAL_RCC_OscConfig+0x610>
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c64:	4b55      	ldr	r3, [pc, #340]	; (8001dbc <HAL_RCC_OscConfig+0x618>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d1ec      	bne.n	8001c4a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c70:	4b52      	ldr	r3, [pc, #328]	; (8001dbc <HAL_RCC_OscConfig+0x618>)
 8001c72:	68da      	ldr	r2, [r3, #12]
 8001c74:	4b52      	ldr	r3, [pc, #328]	; (8001dc0 <HAL_RCC_OscConfig+0x61c>)
 8001c76:	4013      	ands	r3, r2
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	6a11      	ldr	r1, [r2, #32]
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c80:	3a01      	subs	r2, #1
 8001c82:	0112      	lsls	r2, r2, #4
 8001c84:	4311      	orrs	r1, r2
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001c8a:	0212      	lsls	r2, r2, #8
 8001c8c:	4311      	orrs	r1, r2
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c92:	0852      	lsrs	r2, r2, #1
 8001c94:	3a01      	subs	r2, #1
 8001c96:	0552      	lsls	r2, r2, #21
 8001c98:	4311      	orrs	r1, r2
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c9e:	0852      	lsrs	r2, r2, #1
 8001ca0:	3a01      	subs	r2, #1
 8001ca2:	0652      	lsls	r2, r2, #25
 8001ca4:	4311      	orrs	r1, r2
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001caa:	06d2      	lsls	r2, r2, #27
 8001cac:	430a      	orrs	r2, r1
 8001cae:	4943      	ldr	r1, [pc, #268]	; (8001dbc <HAL_RCC_OscConfig+0x618>)
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cb4:	4b41      	ldr	r3, [pc, #260]	; (8001dbc <HAL_RCC_OscConfig+0x618>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a40      	ldr	r2, [pc, #256]	; (8001dbc <HAL_RCC_OscConfig+0x618>)
 8001cba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cbe:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cc0:	4b3e      	ldr	r3, [pc, #248]	; (8001dbc <HAL_RCC_OscConfig+0x618>)
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	4a3d      	ldr	r2, [pc, #244]	; (8001dbc <HAL_RCC_OscConfig+0x618>)
 8001cc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cca:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ccc:	f7fe ffae 	bl	8000c2c <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cd4:	f7fe ffaa 	bl	8000c2c <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e066      	b.n	8001db4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ce6:	4b35      	ldr	r3, [pc, #212]	; (8001dbc <HAL_RCC_OscConfig+0x618>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d0f0      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x530>
 8001cf2:	e05e      	b.n	8001db2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cf4:	4b31      	ldr	r3, [pc, #196]	; (8001dbc <HAL_RCC_OscConfig+0x618>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a30      	ldr	r2, [pc, #192]	; (8001dbc <HAL_RCC_OscConfig+0x618>)
 8001cfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d00:	f7fe ff94 	bl	8000c2c <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d06:	e008      	b.n	8001d1a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d08:	f7fe ff90 	bl	8000c2c <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e04c      	b.n	8001db4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d1a:	4b28      	ldr	r3, [pc, #160]	; (8001dbc <HAL_RCC_OscConfig+0x618>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1f0      	bne.n	8001d08 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001d26:	4b25      	ldr	r3, [pc, #148]	; (8001dbc <HAL_RCC_OscConfig+0x618>)
 8001d28:	68da      	ldr	r2, [r3, #12]
 8001d2a:	4924      	ldr	r1, [pc, #144]	; (8001dbc <HAL_RCC_OscConfig+0x618>)
 8001d2c:	4b25      	ldr	r3, [pc, #148]	; (8001dc4 <HAL_RCC_OscConfig+0x620>)
 8001d2e:	4013      	ands	r3, r2
 8001d30:	60cb      	str	r3, [r1, #12]
 8001d32:	e03e      	b.n	8001db2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	69db      	ldr	r3, [r3, #28]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d101      	bne.n	8001d40 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e039      	b.n	8001db4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001d40:	4b1e      	ldr	r3, [pc, #120]	; (8001dbc <HAL_RCC_OscConfig+0x618>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	f003 0203 	and.w	r2, r3, #3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a1b      	ldr	r3, [r3, #32]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d12c      	bne.n	8001dae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d123      	bne.n	8001dae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d70:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d11b      	bne.n	8001dae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d80:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d113      	bne.n	8001dae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d90:	085b      	lsrs	r3, r3, #1
 8001d92:	3b01      	subs	r3, #1
 8001d94:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d109      	bne.n	8001dae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001da4:	085b      	lsrs	r3, r3, #1
 8001da6:	3b01      	subs	r3, #1
 8001da8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d001      	beq.n	8001db2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e000      	b.n	8001db4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001db2:	2300      	movs	r3, #0
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3720      	adds	r7, #32
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	019f800c 	.word	0x019f800c
 8001dc4:	feeefffc 	.word	0xfeeefffc

08001dc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d101      	bne.n	8001de0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e11e      	b.n	800201e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001de0:	4b91      	ldr	r3, [pc, #580]	; (8002028 <HAL_RCC_ClockConfig+0x260>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 030f 	and.w	r3, r3, #15
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d910      	bls.n	8001e10 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dee:	4b8e      	ldr	r3, [pc, #568]	; (8002028 <HAL_RCC_ClockConfig+0x260>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f023 020f 	bic.w	r2, r3, #15
 8001df6:	498c      	ldr	r1, [pc, #560]	; (8002028 <HAL_RCC_ClockConfig+0x260>)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dfe:	4b8a      	ldr	r3, [pc, #552]	; (8002028 <HAL_RCC_ClockConfig+0x260>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 030f 	and.w	r3, r3, #15
 8001e06:	683a      	ldr	r2, [r7, #0]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d001      	beq.n	8001e10 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e106      	b.n	800201e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d073      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	2b03      	cmp	r3, #3
 8001e22:	d129      	bne.n	8001e78 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e24:	4b81      	ldr	r3, [pc, #516]	; (800202c <HAL_RCC_ClockConfig+0x264>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d101      	bne.n	8001e34 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e0f4      	b.n	800201e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001e34:	f000 f99e 	bl	8002174 <RCC_GetSysClockFreqFromPLLSource>
 8001e38:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	4a7c      	ldr	r2, [pc, #496]	; (8002030 <HAL_RCC_ClockConfig+0x268>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d93f      	bls.n	8001ec2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001e42:	4b7a      	ldr	r3, [pc, #488]	; (800202c <HAL_RCC_ClockConfig+0x264>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d009      	beq.n	8001e62 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d033      	beq.n	8001ec2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d12f      	bne.n	8001ec2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001e62:	4b72      	ldr	r3, [pc, #456]	; (800202c <HAL_RCC_ClockConfig+0x264>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e6a:	4a70      	ldr	r2, [pc, #448]	; (800202c <HAL_RCC_ClockConfig+0x264>)
 8001e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e70:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001e72:	2380      	movs	r3, #128	; 0x80
 8001e74:	617b      	str	r3, [r7, #20]
 8001e76:	e024      	b.n	8001ec2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d107      	bne.n	8001e90 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e80:	4b6a      	ldr	r3, [pc, #424]	; (800202c <HAL_RCC_ClockConfig+0x264>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d109      	bne.n	8001ea0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e0c6      	b.n	800201e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e90:	4b66      	ldr	r3, [pc, #408]	; (800202c <HAL_RCC_ClockConfig+0x264>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d101      	bne.n	8001ea0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e0be      	b.n	800201e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001ea0:	f000 f8ce 	bl	8002040 <HAL_RCC_GetSysClockFreq>
 8001ea4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	4a61      	ldr	r2, [pc, #388]	; (8002030 <HAL_RCC_ClockConfig+0x268>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d909      	bls.n	8001ec2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001eae:	4b5f      	ldr	r3, [pc, #380]	; (800202c <HAL_RCC_ClockConfig+0x264>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001eb6:	4a5d      	ldr	r2, [pc, #372]	; (800202c <HAL_RCC_ClockConfig+0x264>)
 8001eb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ebc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001ebe:	2380      	movs	r3, #128	; 0x80
 8001ec0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ec2:	4b5a      	ldr	r3, [pc, #360]	; (800202c <HAL_RCC_ClockConfig+0x264>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f023 0203 	bic.w	r2, r3, #3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	4957      	ldr	r1, [pc, #348]	; (800202c <HAL_RCC_ClockConfig+0x264>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ed4:	f7fe feaa 	bl	8000c2c <HAL_GetTick>
 8001ed8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eda:	e00a      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001edc:	f7fe fea6 	bl	8000c2c <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e095      	b.n	800201e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ef2:	4b4e      	ldr	r3, [pc, #312]	; (800202c <HAL_RCC_ClockConfig+0x264>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f003 020c 	and.w	r2, r3, #12
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d1eb      	bne.n	8001edc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d023      	beq.n	8001f58 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0304 	and.w	r3, r3, #4
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d005      	beq.n	8001f28 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f1c:	4b43      	ldr	r3, [pc, #268]	; (800202c <HAL_RCC_ClockConfig+0x264>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	4a42      	ldr	r2, [pc, #264]	; (800202c <HAL_RCC_ClockConfig+0x264>)
 8001f22:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f26:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0308 	and.w	r3, r3, #8
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d007      	beq.n	8001f44 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001f34:	4b3d      	ldr	r3, [pc, #244]	; (800202c <HAL_RCC_ClockConfig+0x264>)
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001f3c:	4a3b      	ldr	r2, [pc, #236]	; (800202c <HAL_RCC_ClockConfig+0x264>)
 8001f3e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f42:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f44:	4b39      	ldr	r3, [pc, #228]	; (800202c <HAL_RCC_ClockConfig+0x264>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	4936      	ldr	r1, [pc, #216]	; (800202c <HAL_RCC_ClockConfig+0x264>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	608b      	str	r3, [r1, #8]
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	2b80      	cmp	r3, #128	; 0x80
 8001f5c:	d105      	bne.n	8001f6a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001f5e:	4b33      	ldr	r3, [pc, #204]	; (800202c <HAL_RCC_ClockConfig+0x264>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	4a32      	ldr	r2, [pc, #200]	; (800202c <HAL_RCC_ClockConfig+0x264>)
 8001f64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f68:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f6a:	4b2f      	ldr	r3, [pc, #188]	; (8002028 <HAL_RCC_ClockConfig+0x260>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 030f 	and.w	r3, r3, #15
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d21d      	bcs.n	8001fb4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f78:	4b2b      	ldr	r3, [pc, #172]	; (8002028 <HAL_RCC_ClockConfig+0x260>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f023 020f 	bic.w	r2, r3, #15
 8001f80:	4929      	ldr	r1, [pc, #164]	; (8002028 <HAL_RCC_ClockConfig+0x260>)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f88:	f7fe fe50 	bl	8000c2c <HAL_GetTick>
 8001f8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f8e:	e00a      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f90:	f7fe fe4c 	bl	8000c2c <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e03b      	b.n	800201e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fa6:	4b20      	ldr	r3, [pc, #128]	; (8002028 <HAL_RCC_ClockConfig+0x260>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 030f 	and.w	r3, r3, #15
 8001fae:	683a      	ldr	r2, [r7, #0]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d1ed      	bne.n	8001f90 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0304 	and.w	r3, r3, #4
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d008      	beq.n	8001fd2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fc0:	4b1a      	ldr	r3, [pc, #104]	; (800202c <HAL_RCC_ClockConfig+0x264>)
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	4917      	ldr	r1, [pc, #92]	; (800202c <HAL_RCC_ClockConfig+0x264>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0308 	and.w	r3, r3, #8
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d009      	beq.n	8001ff2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fde:	4b13      	ldr	r3, [pc, #76]	; (800202c <HAL_RCC_ClockConfig+0x264>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	490f      	ldr	r1, [pc, #60]	; (800202c <HAL_RCC_ClockConfig+0x264>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ff2:	f000 f825 	bl	8002040 <HAL_RCC_GetSysClockFreq>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	4b0c      	ldr	r3, [pc, #48]	; (800202c <HAL_RCC_ClockConfig+0x264>)
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	091b      	lsrs	r3, r3, #4
 8001ffe:	f003 030f 	and.w	r3, r3, #15
 8002002:	490c      	ldr	r1, [pc, #48]	; (8002034 <HAL_RCC_ClockConfig+0x26c>)
 8002004:	5ccb      	ldrb	r3, [r1, r3]
 8002006:	f003 031f 	and.w	r3, r3, #31
 800200a:	fa22 f303 	lsr.w	r3, r2, r3
 800200e:	4a0a      	ldr	r2, [pc, #40]	; (8002038 <HAL_RCC_ClockConfig+0x270>)
 8002010:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002012:	4b0a      	ldr	r3, [pc, #40]	; (800203c <HAL_RCC_ClockConfig+0x274>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f7fe fdbc 	bl	8000b94 <HAL_InitTick>
 800201c:	4603      	mov	r3, r0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3718      	adds	r7, #24
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	40022000 	.word	0x40022000
 800202c:	40021000 	.word	0x40021000
 8002030:	04c4b400 	.word	0x04c4b400
 8002034:	080053f8 	.word	0x080053f8
 8002038:	20000008 	.word	0x20000008
 800203c:	2000000c 	.word	0x2000000c

08002040 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002040:	b480      	push	{r7}
 8002042:	b087      	sub	sp, #28
 8002044:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002046:	4b2c      	ldr	r3, [pc, #176]	; (80020f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f003 030c 	and.w	r3, r3, #12
 800204e:	2b04      	cmp	r3, #4
 8002050:	d102      	bne.n	8002058 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002052:	4b2a      	ldr	r3, [pc, #168]	; (80020fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002054:	613b      	str	r3, [r7, #16]
 8002056:	e047      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002058:	4b27      	ldr	r3, [pc, #156]	; (80020f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f003 030c 	and.w	r3, r3, #12
 8002060:	2b08      	cmp	r3, #8
 8002062:	d102      	bne.n	800206a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002064:	4b26      	ldr	r3, [pc, #152]	; (8002100 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002066:	613b      	str	r3, [r7, #16]
 8002068:	e03e      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800206a:	4b23      	ldr	r3, [pc, #140]	; (80020f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f003 030c 	and.w	r3, r3, #12
 8002072:	2b0c      	cmp	r3, #12
 8002074:	d136      	bne.n	80020e4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002076:	4b20      	ldr	r3, [pc, #128]	; (80020f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	f003 0303 	and.w	r3, r3, #3
 800207e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002080:	4b1d      	ldr	r3, [pc, #116]	; (80020f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	091b      	lsrs	r3, r3, #4
 8002086:	f003 030f 	and.w	r3, r3, #15
 800208a:	3301      	adds	r3, #1
 800208c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2b03      	cmp	r3, #3
 8002092:	d10c      	bne.n	80020ae <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002094:	4a1a      	ldr	r2, [pc, #104]	; (8002100 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	fbb2 f3f3 	udiv	r3, r2, r3
 800209c:	4a16      	ldr	r2, [pc, #88]	; (80020f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800209e:	68d2      	ldr	r2, [r2, #12]
 80020a0:	0a12      	lsrs	r2, r2, #8
 80020a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020a6:	fb02 f303 	mul.w	r3, r2, r3
 80020aa:	617b      	str	r3, [r7, #20]
      break;
 80020ac:	e00c      	b.n	80020c8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020ae:	4a13      	ldr	r2, [pc, #76]	; (80020fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b6:	4a10      	ldr	r2, [pc, #64]	; (80020f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020b8:	68d2      	ldr	r2, [r2, #12]
 80020ba:	0a12      	lsrs	r2, r2, #8
 80020bc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020c0:	fb02 f303 	mul.w	r3, r2, r3
 80020c4:	617b      	str	r3, [r7, #20]
      break;
 80020c6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020c8:	4b0b      	ldr	r3, [pc, #44]	; (80020f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	0e5b      	lsrs	r3, r3, #25
 80020ce:	f003 0303 	and.w	r3, r3, #3
 80020d2:	3301      	adds	r3, #1
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80020d8:	697a      	ldr	r2, [r7, #20]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e0:	613b      	str	r3, [r7, #16]
 80020e2:	e001      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80020e4:	2300      	movs	r3, #0
 80020e6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80020e8:	693b      	ldr	r3, [r7, #16]
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	371c      	adds	r7, #28
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	40021000 	.word	0x40021000
 80020fc:	00f42400 	.word	0x00f42400
 8002100:	007a1200 	.word	0x007a1200

08002104 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002108:	4b03      	ldr	r3, [pc, #12]	; (8002118 <HAL_RCC_GetHCLKFreq+0x14>)
 800210a:	681b      	ldr	r3, [r3, #0]
}
 800210c:	4618      	mov	r0, r3
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	20000008 	.word	0x20000008

0800211c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002120:	f7ff fff0 	bl	8002104 <HAL_RCC_GetHCLKFreq>
 8002124:	4602      	mov	r2, r0
 8002126:	4b06      	ldr	r3, [pc, #24]	; (8002140 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	0a1b      	lsrs	r3, r3, #8
 800212c:	f003 0307 	and.w	r3, r3, #7
 8002130:	4904      	ldr	r1, [pc, #16]	; (8002144 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002132:	5ccb      	ldrb	r3, [r1, r3]
 8002134:	f003 031f 	and.w	r3, r3, #31
 8002138:	fa22 f303 	lsr.w	r3, r2, r3
}
 800213c:	4618      	mov	r0, r3
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40021000 	.word	0x40021000
 8002144:	08005408 	.word	0x08005408

08002148 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800214c:	f7ff ffda 	bl	8002104 <HAL_RCC_GetHCLKFreq>
 8002150:	4602      	mov	r2, r0
 8002152:	4b06      	ldr	r3, [pc, #24]	; (800216c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	0adb      	lsrs	r3, r3, #11
 8002158:	f003 0307 	and.w	r3, r3, #7
 800215c:	4904      	ldr	r1, [pc, #16]	; (8002170 <HAL_RCC_GetPCLK2Freq+0x28>)
 800215e:	5ccb      	ldrb	r3, [r1, r3]
 8002160:	f003 031f 	and.w	r3, r3, #31
 8002164:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002168:	4618      	mov	r0, r3
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40021000 	.word	0x40021000
 8002170:	08005408 	.word	0x08005408

08002174 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002174:	b480      	push	{r7}
 8002176:	b087      	sub	sp, #28
 8002178:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800217a:	4b1e      	ldr	r3, [pc, #120]	; (80021f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	f003 0303 	and.w	r3, r3, #3
 8002182:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002184:	4b1b      	ldr	r3, [pc, #108]	; (80021f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	091b      	lsrs	r3, r3, #4
 800218a:	f003 030f 	and.w	r3, r3, #15
 800218e:	3301      	adds	r3, #1
 8002190:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	2b03      	cmp	r3, #3
 8002196:	d10c      	bne.n	80021b2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002198:	4a17      	ldr	r2, [pc, #92]	; (80021f8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a0:	4a14      	ldr	r2, [pc, #80]	; (80021f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021a2:	68d2      	ldr	r2, [r2, #12]
 80021a4:	0a12      	lsrs	r2, r2, #8
 80021a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80021aa:	fb02 f303 	mul.w	r3, r2, r3
 80021ae:	617b      	str	r3, [r7, #20]
    break;
 80021b0:	e00c      	b.n	80021cc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021b2:	4a12      	ldr	r2, [pc, #72]	; (80021fc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ba:	4a0e      	ldr	r2, [pc, #56]	; (80021f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021bc:	68d2      	ldr	r2, [r2, #12]
 80021be:	0a12      	lsrs	r2, r2, #8
 80021c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80021c4:	fb02 f303 	mul.w	r3, r2, r3
 80021c8:	617b      	str	r3, [r7, #20]
    break;
 80021ca:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021cc:	4b09      	ldr	r3, [pc, #36]	; (80021f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	0e5b      	lsrs	r3, r3, #25
 80021d2:	f003 0303 	and.w	r3, r3, #3
 80021d6:	3301      	adds	r3, #1
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80021dc:	697a      	ldr	r2, [r7, #20]
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80021e6:	687b      	ldr	r3, [r7, #4]
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	371c      	adds	r7, #28
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	40021000 	.word	0x40021000
 80021f8:	007a1200 	.word	0x007a1200
 80021fc:	00f42400 	.word	0x00f42400

08002200 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002208:	2300      	movs	r3, #0
 800220a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800220c:	2300      	movs	r3, #0
 800220e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002218:	2b00      	cmp	r3, #0
 800221a:	f000 8098 	beq.w	800234e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800221e:	2300      	movs	r3, #0
 8002220:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002222:	4b43      	ldr	r3, [pc, #268]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d10d      	bne.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800222e:	4b40      	ldr	r3, [pc, #256]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002232:	4a3f      	ldr	r2, [pc, #252]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002238:	6593      	str	r3, [r2, #88]	; 0x58
 800223a:	4b3d      	ldr	r3, [pc, #244]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800223c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800223e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002242:	60bb      	str	r3, [r7, #8]
 8002244:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002246:	2301      	movs	r3, #1
 8002248:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800224a:	4b3a      	ldr	r3, [pc, #232]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a39      	ldr	r2, [pc, #228]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002250:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002254:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002256:	f7fe fce9 	bl	8000c2c <HAL_GetTick>
 800225a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800225c:	e009      	b.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800225e:	f7fe fce5 	bl	8000c2c <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d902      	bls.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	74fb      	strb	r3, [r7, #19]
        break;
 8002270:	e005      	b.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002272:	4b30      	ldr	r3, [pc, #192]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227a:	2b00      	cmp	r3, #0
 800227c:	d0ef      	beq.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800227e:	7cfb      	ldrb	r3, [r7, #19]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d159      	bne.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002284:	4b2a      	ldr	r3, [pc, #168]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800228a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800228e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d01e      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800229a:	697a      	ldr	r2, [r7, #20]
 800229c:	429a      	cmp	r2, r3
 800229e:	d019      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80022a0:	4b23      	ldr	r3, [pc, #140]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022aa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80022ac:	4b20      	ldr	r3, [pc, #128]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b2:	4a1f      	ldr	r2, [pc, #124]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80022bc:	4b1c      	ldr	r3, [pc, #112]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022c2:	4a1b      	ldr	r2, [pc, #108]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80022cc:	4a18      	ldr	r2, [pc, #96]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d016      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022de:	f7fe fca5 	bl	8000c2c <HAL_GetTick>
 80022e2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022e4:	e00b      	b.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022e6:	f7fe fca1 	bl	8000c2c <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d902      	bls.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	74fb      	strb	r3, [r7, #19]
            break;
 80022fc:	e006      	b.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022fe:	4b0c      	ldr	r3, [pc, #48]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d0ec      	beq.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800230c:	7cfb      	ldrb	r3, [r7, #19]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d10b      	bne.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002312:	4b07      	ldr	r3, [pc, #28]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002318:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002320:	4903      	ldr	r1, [pc, #12]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002322:	4313      	orrs	r3, r2
 8002324:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002328:	e008      	b.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800232a:	7cfb      	ldrb	r3, [r7, #19]
 800232c:	74bb      	strb	r3, [r7, #18]
 800232e:	e005      	b.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002330:	40021000 	.word	0x40021000
 8002334:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002338:	7cfb      	ldrb	r3, [r7, #19]
 800233a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800233c:	7c7b      	ldrb	r3, [r7, #17]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d105      	bne.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002342:	4ba7      	ldr	r3, [pc, #668]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002346:	4aa6      	ldr	r2, [pc, #664]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002348:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800234c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00a      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800235a:	4ba1      	ldr	r3, [pc, #644]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800235c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002360:	f023 0203 	bic.w	r2, r3, #3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	499d      	ldr	r1, [pc, #628]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800236a:	4313      	orrs	r3, r2
 800236c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00a      	beq.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800237c:	4b98      	ldr	r3, [pc, #608]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800237e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002382:	f023 020c 	bic.w	r2, r3, #12
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	4995      	ldr	r1, [pc, #596]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800238c:	4313      	orrs	r3, r2
 800238e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0304 	and.w	r3, r3, #4
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00a      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800239e:	4b90      	ldr	r3, [pc, #576]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	498c      	ldr	r1, [pc, #560]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0308 	and.w	r3, r3, #8
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d00a      	beq.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023c0:	4b87      	ldr	r3, [pc, #540]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	4984      	ldr	r1, [pc, #528]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0310 	and.w	r3, r3, #16
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d00a      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80023e2:	4b7f      	ldr	r3, [pc, #508]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	695b      	ldr	r3, [r3, #20]
 80023f0:	497b      	ldr	r1, [pc, #492]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0320 	and.w	r3, r3, #32
 8002400:	2b00      	cmp	r3, #0
 8002402:	d00a      	beq.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002404:	4b76      	ldr	r3, [pc, #472]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800240a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	4973      	ldr	r1, [pc, #460]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002414:	4313      	orrs	r3, r2
 8002416:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00a      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002426:	4b6e      	ldr	r3, [pc, #440]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800242c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	69db      	ldr	r3, [r3, #28]
 8002434:	496a      	ldr	r1, [pc, #424]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002436:	4313      	orrs	r3, r2
 8002438:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002444:	2b00      	cmp	r3, #0
 8002446:	d00a      	beq.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002448:	4b65      	ldr	r3, [pc, #404]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800244a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800244e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	4962      	ldr	r1, [pc, #392]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002458:	4313      	orrs	r3, r2
 800245a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002466:	2b00      	cmp	r3, #0
 8002468:	d00a      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800246a:	4b5d      	ldr	r3, [pc, #372]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800246c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002470:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002478:	4959      	ldr	r1, [pc, #356]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800247a:	4313      	orrs	r3, r2
 800247c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002488:	2b00      	cmp	r3, #0
 800248a:	d00a      	beq.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800248c:	4b54      	ldr	r3, [pc, #336]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800248e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002492:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249a:	4951      	ldr	r1, [pc, #324]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800249c:	4313      	orrs	r3, r2
 800249e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d015      	beq.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024ae:	4b4c      	ldr	r3, [pc, #304]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024bc:	4948      	ldr	r1, [pc, #288]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024cc:	d105      	bne.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024ce:	4b44      	ldr	r3, [pc, #272]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	4a43      	ldr	r2, [pc, #268]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024d8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d015      	beq.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80024e6:	4b3e      	ldr	r3, [pc, #248]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f4:	493a      	ldr	r1, [pc, #232]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002500:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002504:	d105      	bne.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002506:	4b36      	ldr	r3, [pc, #216]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	4a35      	ldr	r2, [pc, #212]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800250c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002510:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d015      	beq.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800251e:	4b30      	ldr	r3, [pc, #192]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002524:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800252c:	492c      	ldr	r1, [pc, #176]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800252e:	4313      	orrs	r3, r2
 8002530:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002538:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800253c:	d105      	bne.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800253e:	4b28      	ldr	r3, [pc, #160]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	4a27      	ldr	r2, [pc, #156]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002548:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d015      	beq.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002556:	4b22      	ldr	r3, [pc, #136]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800255c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002564:	491e      	ldr	r1, [pc, #120]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002566:	4313      	orrs	r3, r2
 8002568:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002570:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002574:	d105      	bne.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002576:	4b1a      	ldr	r3, [pc, #104]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	4a19      	ldr	r2, [pc, #100]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800257c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002580:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d015      	beq.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800258e:	4b14      	ldr	r3, [pc, #80]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002594:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800259c:	4910      	ldr	r1, [pc, #64]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025ac:	d105      	bne.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025ae:	4b0c      	ldr	r3, [pc, #48]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	4a0b      	ldr	r2, [pc, #44]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025b8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d018      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80025c6:	4b06      	ldr	r3, [pc, #24]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025cc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d4:	4902      	ldr	r1, [pc, #8]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	e001      	b.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80025e0:	40021000 	.word	0x40021000
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025ea:	d105      	bne.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80025ec:	4b21      	ldr	r3, [pc, #132]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	4a20      	ldr	r2, [pc, #128]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80025f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025f6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d015      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002604:	4b1b      	ldr	r3, [pc, #108]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002612:	4918      	ldr	r1, [pc, #96]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002614:	4313      	orrs	r3, r2
 8002616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002622:	d105      	bne.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002624:	4b13      	ldr	r3, [pc, #76]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	4a12      	ldr	r2, [pc, #72]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800262a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800262e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d015      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800263c:	4b0d      	ldr	r3, [pc, #52]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800263e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002642:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800264a:	490a      	ldr	r1, [pc, #40]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800264c:	4313      	orrs	r3, r2
 800264e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002656:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800265a:	d105      	bne.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800265c:	4b05      	ldr	r3, [pc, #20]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	4a04      	ldr	r2, [pc, #16]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002662:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002666:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002668:	7cbb      	ldrb	r3, [r7, #18]
}
 800266a:	4618      	mov	r0, r3
 800266c:	3718      	adds	r7, #24
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	40021000 	.word	0x40021000

08002678 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d101      	bne.n	800268a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e049      	b.n	800271e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d106      	bne.n	80026a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f7fe f8ee 	bl	8000880 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2202      	movs	r2, #2
 80026a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	3304      	adds	r3, #4
 80026b4:	4619      	mov	r1, r3
 80026b6:	4610      	mov	r0, r2
 80026b8:	f000 fa1e 	bl	8002af8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
	...

08002728 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002736:	b2db      	uxtb	r3, r3
 8002738:	2b01      	cmp	r3, #1
 800273a:	d001      	beq.n	8002740 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e04f      	b.n	80027e0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2202      	movs	r2, #2
 8002744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	68da      	ldr	r2, [r3, #12]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f042 0201 	orr.w	r2, r2, #1
 8002756:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a23      	ldr	r2, [pc, #140]	; (80027ec <HAL_TIM_Base_Start_IT+0xc4>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d01d      	beq.n	800279e <HAL_TIM_Base_Start_IT+0x76>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800276a:	d018      	beq.n	800279e <HAL_TIM_Base_Start_IT+0x76>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a1f      	ldr	r2, [pc, #124]	; (80027f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d013      	beq.n	800279e <HAL_TIM_Base_Start_IT+0x76>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a1e      	ldr	r2, [pc, #120]	; (80027f4 <HAL_TIM_Base_Start_IT+0xcc>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d00e      	beq.n	800279e <HAL_TIM_Base_Start_IT+0x76>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a1c      	ldr	r2, [pc, #112]	; (80027f8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d009      	beq.n	800279e <HAL_TIM_Base_Start_IT+0x76>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a1b      	ldr	r2, [pc, #108]	; (80027fc <HAL_TIM_Base_Start_IT+0xd4>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d004      	beq.n	800279e <HAL_TIM_Base_Start_IT+0x76>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a19      	ldr	r2, [pc, #100]	; (8002800 <HAL_TIM_Base_Start_IT+0xd8>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d115      	bne.n	80027ca <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	4b17      	ldr	r3, [pc, #92]	; (8002804 <HAL_TIM_Base_Start_IT+0xdc>)
 80027a6:	4013      	ands	r3, r2
 80027a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2b06      	cmp	r3, #6
 80027ae:	d015      	beq.n	80027dc <HAL_TIM_Base_Start_IT+0xb4>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027b6:	d011      	beq.n	80027dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f042 0201 	orr.w	r2, r2, #1
 80027c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027c8:	e008      	b.n	80027dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f042 0201 	orr.w	r2, r2, #1
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	e000      	b.n	80027de <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027dc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3714      	adds	r7, #20
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr
 80027ec:	40012c00 	.word	0x40012c00
 80027f0:	40000400 	.word	0x40000400
 80027f4:	40000800 	.word	0x40000800
 80027f8:	40013400 	.word	0x40013400
 80027fc:	40014000 	.word	0x40014000
 8002800:	40015000 	.word	0x40015000
 8002804:	00010007 	.word	0x00010007

08002808 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d020      	beq.n	800286c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d01b      	beq.n	800286c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f06f 0202 	mvn.w	r2, #2
 800283c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2201      	movs	r2, #1
 8002842:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	f003 0303 	and.w	r3, r3, #3
 800284e:	2b00      	cmp	r3, #0
 8002850:	d003      	beq.n	800285a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 f931 	bl	8002aba <HAL_TIM_IC_CaptureCallback>
 8002858:	e005      	b.n	8002866 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 f923 	bl	8002aa6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f000 f934 	bl	8002ace <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	f003 0304 	and.w	r3, r3, #4
 8002872:	2b00      	cmp	r3, #0
 8002874:	d020      	beq.n	80028b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f003 0304 	and.w	r3, r3, #4
 800287c:	2b00      	cmp	r3, #0
 800287e:	d01b      	beq.n	80028b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f06f 0204 	mvn.w	r2, #4
 8002888:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2202      	movs	r2, #2
 800288e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800289a:	2b00      	cmp	r3, #0
 800289c:	d003      	beq.n	80028a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 f90b 	bl	8002aba <HAL_TIM_IC_CaptureCallback>
 80028a4:	e005      	b.n	80028b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 f8fd 	bl	8002aa6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f000 f90e 	bl	8002ace <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	f003 0308 	and.w	r3, r3, #8
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d020      	beq.n	8002904 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f003 0308 	and.w	r3, r3, #8
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d01b      	beq.n	8002904 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f06f 0208 	mvn.w	r2, #8
 80028d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2204      	movs	r2, #4
 80028da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	69db      	ldr	r3, [r3, #28]
 80028e2:	f003 0303 	and.w	r3, r3, #3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d003      	beq.n	80028f2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 f8e5 	bl	8002aba <HAL_TIM_IC_CaptureCallback>
 80028f0:	e005      	b.n	80028fe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 f8d7 	bl	8002aa6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f000 f8e8 	bl	8002ace <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	f003 0310 	and.w	r3, r3, #16
 800290a:	2b00      	cmp	r3, #0
 800290c:	d020      	beq.n	8002950 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f003 0310 	and.w	r3, r3, #16
 8002914:	2b00      	cmp	r3, #0
 8002916:	d01b      	beq.n	8002950 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f06f 0210 	mvn.w	r2, #16
 8002920:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2208      	movs	r2, #8
 8002926:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	69db      	ldr	r3, [r3, #28]
 800292e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002932:	2b00      	cmp	r3, #0
 8002934:	d003      	beq.n	800293e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 f8bf 	bl	8002aba <HAL_TIM_IC_CaptureCallback>
 800293c:	e005      	b.n	800294a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 f8b1 	bl	8002aa6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f000 f8c2 	bl	8002ace <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00c      	beq.n	8002974 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	2b00      	cmp	r3, #0
 8002962:	d007      	beq.n	8002974 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f06f 0201 	mvn.w	r2, #1
 800296c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f7fd ff4a 	bl	8000808 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800297a:	2b00      	cmp	r3, #0
 800297c:	d104      	bne.n	8002988 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00c      	beq.n	80029a2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800298e:	2b00      	cmp	r3, #0
 8002990:	d007      	beq.n	80029a2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800299a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f000 f9ed 	bl	8002d7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00c      	beq.n	80029c6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d007      	beq.n	80029c6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80029be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f000 f9e5 	bl	8002d90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00c      	beq.n	80029ea <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d007      	beq.n	80029ea <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80029e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 f87c 	bl	8002ae2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	f003 0320 	and.w	r3, r3, #32
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d00c      	beq.n	8002a0e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f003 0320 	and.w	r3, r3, #32
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d007      	beq.n	8002a0e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f06f 0220 	mvn.w	r2, #32
 8002a06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f000 f9ad 	bl	8002d68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00c      	beq.n	8002a32 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d007      	beq.n	8002a32 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8002a2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 f9b9 	bl	8002da4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00c      	beq.n	8002a56 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d007      	beq.n	8002a56 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8002a4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 f9b1 	bl	8002db8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00c      	beq.n	8002a7a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d007      	beq.n	8002a7a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8002a72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f000 f9a9 	bl	8002dcc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d00c      	beq.n	8002a9e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d007      	beq.n	8002a9e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8002a96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f000 f9a1 	bl	8002de0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a9e:	bf00      	nop
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b083      	sub	sp, #12
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002aae:	bf00      	nop
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr

08002aba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002aba:	b480      	push	{r7}
 8002abc:	b083      	sub	sp, #12
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ac2:	bf00      	nop
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr

08002ace <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b083      	sub	sp, #12
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ad6:	bf00      	nop
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr

08002ae2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	b083      	sub	sp, #12
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002aea:	bf00      	nop
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
	...

08002af8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a48      	ldr	r2, [pc, #288]	; (8002c2c <TIM_Base_SetConfig+0x134>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d013      	beq.n	8002b38 <TIM_Base_SetConfig+0x40>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b16:	d00f      	beq.n	8002b38 <TIM_Base_SetConfig+0x40>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a45      	ldr	r2, [pc, #276]	; (8002c30 <TIM_Base_SetConfig+0x138>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d00b      	beq.n	8002b38 <TIM_Base_SetConfig+0x40>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4a44      	ldr	r2, [pc, #272]	; (8002c34 <TIM_Base_SetConfig+0x13c>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d007      	beq.n	8002b38 <TIM_Base_SetConfig+0x40>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4a43      	ldr	r2, [pc, #268]	; (8002c38 <TIM_Base_SetConfig+0x140>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d003      	beq.n	8002b38 <TIM_Base_SetConfig+0x40>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4a42      	ldr	r2, [pc, #264]	; (8002c3c <TIM_Base_SetConfig+0x144>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d108      	bne.n	8002b4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	68fa      	ldr	r2, [r7, #12]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a37      	ldr	r2, [pc, #220]	; (8002c2c <TIM_Base_SetConfig+0x134>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d01f      	beq.n	8002b92 <TIM_Base_SetConfig+0x9a>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b58:	d01b      	beq.n	8002b92 <TIM_Base_SetConfig+0x9a>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a34      	ldr	r2, [pc, #208]	; (8002c30 <TIM_Base_SetConfig+0x138>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d017      	beq.n	8002b92 <TIM_Base_SetConfig+0x9a>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a33      	ldr	r2, [pc, #204]	; (8002c34 <TIM_Base_SetConfig+0x13c>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d013      	beq.n	8002b92 <TIM_Base_SetConfig+0x9a>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a32      	ldr	r2, [pc, #200]	; (8002c38 <TIM_Base_SetConfig+0x140>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d00f      	beq.n	8002b92 <TIM_Base_SetConfig+0x9a>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a32      	ldr	r2, [pc, #200]	; (8002c40 <TIM_Base_SetConfig+0x148>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d00b      	beq.n	8002b92 <TIM_Base_SetConfig+0x9a>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a31      	ldr	r2, [pc, #196]	; (8002c44 <TIM_Base_SetConfig+0x14c>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d007      	beq.n	8002b92 <TIM_Base_SetConfig+0x9a>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a30      	ldr	r2, [pc, #192]	; (8002c48 <TIM_Base_SetConfig+0x150>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d003      	beq.n	8002b92 <TIM_Base_SetConfig+0x9a>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a2b      	ldr	r2, [pc, #172]	; (8002c3c <TIM_Base_SetConfig+0x144>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d108      	bne.n	8002ba4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	68fa      	ldr	r2, [r7, #12]
 8002bb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	689a      	ldr	r2, [r3, #8]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4a18      	ldr	r2, [pc, #96]	; (8002c2c <TIM_Base_SetConfig+0x134>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d013      	beq.n	8002bf8 <TIM_Base_SetConfig+0x100>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4a19      	ldr	r2, [pc, #100]	; (8002c38 <TIM_Base_SetConfig+0x140>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d00f      	beq.n	8002bf8 <TIM_Base_SetConfig+0x100>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4a19      	ldr	r2, [pc, #100]	; (8002c40 <TIM_Base_SetConfig+0x148>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d00b      	beq.n	8002bf8 <TIM_Base_SetConfig+0x100>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4a18      	ldr	r2, [pc, #96]	; (8002c44 <TIM_Base_SetConfig+0x14c>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d007      	beq.n	8002bf8 <TIM_Base_SetConfig+0x100>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a17      	ldr	r2, [pc, #92]	; (8002c48 <TIM_Base_SetConfig+0x150>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d003      	beq.n	8002bf8 <TIM_Base_SetConfig+0x100>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a12      	ldr	r2, [pc, #72]	; (8002c3c <TIM_Base_SetConfig+0x144>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d103      	bne.n	8002c00 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	691a      	ldr	r2, [r3, #16]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d105      	bne.n	8002c1e <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	f023 0201 	bic.w	r2, r3, #1
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	611a      	str	r2, [r3, #16]
  }
}
 8002c1e:	bf00      	nop
 8002c20:	3714      	adds	r7, #20
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	40012c00 	.word	0x40012c00
 8002c30:	40000400 	.word	0x40000400
 8002c34:	40000800 	.word	0x40000800
 8002c38:	40013400 	.word	0x40013400
 8002c3c:	40015000 	.word	0x40015000
 8002c40:	40014000 	.word	0x40014000
 8002c44:	40014400 	.word	0x40014400
 8002c48:	40014800 	.word	0x40014800

08002c4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b085      	sub	sp, #20
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d101      	bne.n	8002c64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c60:	2302      	movs	r3, #2
 8002c62:	e06f      	b.n	8002d44 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2202      	movs	r2, #2
 8002c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a31      	ldr	r2, [pc, #196]	; (8002d50 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d009      	beq.n	8002ca2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a30      	ldr	r2, [pc, #192]	; (8002d54 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d004      	beq.n	8002ca2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a2e      	ldr	r2, [pc, #184]	; (8002d58 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d108      	bne.n	8002cb4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002ca8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	68fa      	ldr	r2, [r7, #12]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a1e      	ldr	r2, [pc, #120]	; (8002d50 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d01d      	beq.n	8002d18 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ce4:	d018      	beq.n	8002d18 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a1c      	ldr	r2, [pc, #112]	; (8002d5c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d013      	beq.n	8002d18 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a1a      	ldr	r2, [pc, #104]	; (8002d60 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d00e      	beq.n	8002d18 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a15      	ldr	r2, [pc, #84]	; (8002d54 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d009      	beq.n	8002d18 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a16      	ldr	r2, [pc, #88]	; (8002d64 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d004      	beq.n	8002d18 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a11      	ldr	r2, [pc, #68]	; (8002d58 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d10c      	bne.n	8002d32 <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d1e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	68ba      	ldr	r2, [r7, #8]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68ba      	ldr	r2, [r7, #8]
 8002d30:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3714      	adds	r7, #20
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr
 8002d50:	40012c00 	.word	0x40012c00
 8002d54:	40013400 	.word	0x40013400
 8002d58:	40015000 	.word	0x40015000
 8002d5c:	40000400 	.word	0x40000400
 8002d60:	40000800 	.word	0x40000800
 8002d64:	40014000 	.word	0x40014000

08002d68 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e042      	b.n	8002e8c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d106      	bne.n	8002e1e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f7fd fd57 	bl	80008cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2224      	movs	r2, #36	; 0x24
 8002e22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f022 0201 	bic.w	r2, r2, #1
 8002e34:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d002      	beq.n	8002e44 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 ff3e 	bl	8003cc0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f000 fc3f 	bl	80036c8 <UART_SetConfig>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d101      	bne.n	8002e54 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e01b      	b.n	8002e8c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	685a      	ldr	r2, [r3, #4]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	689a      	ldr	r2, [r3, #8]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f042 0201 	orr.w	r2, r2, #1
 8002e82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f000 ffbd 	bl	8003e04 <UART_CheckIdleState>
 8002e8a:	4603      	mov	r3, r0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3708      	adds	r7, #8
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b091      	sub	sp, #68	; 0x44
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea8:	2b20      	cmp	r3, #32
 8002eaa:	d178      	bne.n	8002f9e <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d002      	beq.n	8002eb8 <HAL_UART_Transmit_IT+0x24>
 8002eb2:	88fb      	ldrh	r3, [r7, #6]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e071      	b.n	8002fa0 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	68ba      	ldr	r2, [r7, #8]
 8002ec0:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	88fa      	ldrh	r2, [r7, #6]
 8002ec6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	88fa      	ldrh	r2, [r7, #6]
 8002ece:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2221      	movs	r2, #33	; 0x21
 8002ee4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002eec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ef0:	d12a      	bne.n	8002f48 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002efa:	d107      	bne.n	8002f0c <HAL_UART_Transmit_IT+0x78>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d103      	bne.n	8002f0c <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	4a29      	ldr	r2, [pc, #164]	; (8002fac <HAL_UART_Transmit_IT+0x118>)
 8002f08:	679a      	str	r2, [r3, #120]	; 0x78
 8002f0a:	e002      	b.n	8002f12 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	4a28      	ldr	r2, [pc, #160]	; (8002fb0 <HAL_UART_Transmit_IT+0x11c>)
 8002f10:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	3308      	adds	r3, #8
 8002f18:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f1c:	e853 3f00 	ldrex	r3, [r3]
 8002f20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f24:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f28:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	3308      	adds	r3, #8
 8002f30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f32:	637a      	str	r2, [r7, #52]	; 0x34
 8002f34:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f36:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f3a:	e841 2300 	strex	r3, r2, [r1]
 8002f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1e5      	bne.n	8002f12 <HAL_UART_Transmit_IT+0x7e>
 8002f46:	e028      	b.n	8002f9a <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f50:	d107      	bne.n	8002f62 <HAL_UART_Transmit_IT+0xce>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d103      	bne.n	8002f62 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	4a15      	ldr	r2, [pc, #84]	; (8002fb4 <HAL_UART_Transmit_IT+0x120>)
 8002f5e:	679a      	str	r2, [r3, #120]	; 0x78
 8002f60:	e002      	b.n	8002f68 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	4a14      	ldr	r2, [pc, #80]	; (8002fb8 <HAL_UART_Transmit_IT+0x124>)
 8002f66:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	e853 3f00 	ldrex	r3, [r3]
 8002f74:	613b      	str	r3, [r7, #16]
   return(result);
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	461a      	mov	r2, r3
 8002f84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f86:	623b      	str	r3, [r7, #32]
 8002f88:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f8a:	69f9      	ldr	r1, [r7, #28]
 8002f8c:	6a3a      	ldr	r2, [r7, #32]
 8002f8e:	e841 2300 	strex	r3, r2, [r1]
 8002f92:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1e6      	bne.n	8002f68 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	e000      	b.n	8002fa0 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002f9e:	2302      	movs	r3, #2
  }
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3744      	adds	r7, #68	; 0x44
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr
 8002fac:	080045cb 	.word	0x080045cb
 8002fb0:	080044eb 	.word	0x080044eb
 8002fb4:	08004429 	.word	0x08004429
 8002fb8:	08004371 	.word	0x08004371

08002fbc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b08a      	sub	sp, #40	; 0x28
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fd0:	2b20      	cmp	r3, #32
 8002fd2:	d137      	bne.n	8003044 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d002      	beq.n	8002fe0 <HAL_UART_Receive_IT+0x24>
 8002fda:	88fb      	ldrh	r3, [r7, #6]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d101      	bne.n	8002fe4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e030      	b.n	8003046 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a18      	ldr	r2, [pc, #96]	; (8003050 <HAL_UART_Receive_IT+0x94>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d01f      	beq.n	8003034 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d018      	beq.n	8003034 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	e853 3f00 	ldrex	r3, [r3]
 800300e:	613b      	str	r3, [r7, #16]
   return(result);
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003016:	627b      	str	r3, [r7, #36]	; 0x24
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	461a      	mov	r2, r3
 800301e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003020:	623b      	str	r3, [r7, #32]
 8003022:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003024:	69f9      	ldr	r1, [r7, #28]
 8003026:	6a3a      	ldr	r2, [r7, #32]
 8003028:	e841 2300 	strex	r3, r2, [r1]
 800302c:	61bb      	str	r3, [r7, #24]
   return(result);
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d1e6      	bne.n	8003002 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003034:	88fb      	ldrh	r3, [r7, #6]
 8003036:	461a      	mov	r2, r3
 8003038:	68b9      	ldr	r1, [r7, #8]
 800303a:	68f8      	ldr	r0, [r7, #12]
 800303c:	f000 fffa 	bl	8004034 <UART_Start_Receive_IT>
 8003040:	4603      	mov	r3, r0
 8003042:	e000      	b.n	8003046 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003044:	2302      	movs	r3, #2
  }
}
 8003046:	4618      	mov	r0, r3
 8003048:	3728      	adds	r7, #40	; 0x28
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	40008000 	.word	0x40008000

08003054 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b0ba      	sub	sp, #232	; 0xe8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800307a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800307e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003082:	4013      	ands	r3, r2
 8003084:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003088:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800308c:	2b00      	cmp	r3, #0
 800308e:	d11b      	bne.n	80030c8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003094:	f003 0320 	and.w	r3, r3, #32
 8003098:	2b00      	cmp	r3, #0
 800309a:	d015      	beq.n	80030c8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800309c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030a0:	f003 0320 	and.w	r3, r3, #32
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d105      	bne.n	80030b4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80030a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d009      	beq.n	80030c8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	f000 82e3 	beq.w	8003684 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	4798      	blx	r3
      }
      return;
 80030c6:	e2dd      	b.n	8003684 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80030c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f000 8123 	beq.w	8003318 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80030d2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80030d6:	4b8d      	ldr	r3, [pc, #564]	; (800330c <HAL_UART_IRQHandler+0x2b8>)
 80030d8:	4013      	ands	r3, r2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d106      	bne.n	80030ec <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80030de:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80030e2:	4b8b      	ldr	r3, [pc, #556]	; (8003310 <HAL_UART_IRQHandler+0x2bc>)
 80030e4:	4013      	ands	r3, r2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	f000 8116 	beq.w	8003318 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80030ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030f0:	f003 0301 	and.w	r3, r3, #1
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d011      	beq.n	800311c <HAL_UART_IRQHandler+0xc8>
 80030f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003100:	2b00      	cmp	r3, #0
 8003102:	d00b      	beq.n	800311c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2201      	movs	r2, #1
 800310a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003112:	f043 0201 	orr.w	r2, r3, #1
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800311c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d011      	beq.n	800314c <HAL_UART_IRQHandler+0xf8>
 8003128:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00b      	beq.n	800314c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2202      	movs	r2, #2
 800313a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003142:	f043 0204 	orr.w	r2, r3, #4
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800314c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003150:	f003 0304 	and.w	r3, r3, #4
 8003154:	2b00      	cmp	r3, #0
 8003156:	d011      	beq.n	800317c <HAL_UART_IRQHandler+0x128>
 8003158:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800315c:	f003 0301 	and.w	r3, r3, #1
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00b      	beq.n	800317c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2204      	movs	r2, #4
 800316a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003172:	f043 0202 	orr.w	r2, r3, #2
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800317c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003180:	f003 0308 	and.w	r3, r3, #8
 8003184:	2b00      	cmp	r3, #0
 8003186:	d017      	beq.n	80031b8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003188:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800318c:	f003 0320 	and.w	r3, r3, #32
 8003190:	2b00      	cmp	r3, #0
 8003192:	d105      	bne.n	80031a0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003194:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003198:	4b5c      	ldr	r3, [pc, #368]	; (800330c <HAL_UART_IRQHandler+0x2b8>)
 800319a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800319c:	2b00      	cmp	r3, #0
 800319e:	d00b      	beq.n	80031b8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2208      	movs	r2, #8
 80031a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ae:	f043 0208 	orr.w	r2, r3, #8
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80031b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d012      	beq.n	80031ea <HAL_UART_IRQHandler+0x196>
 80031c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d00c      	beq.n	80031ea <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e0:	f043 0220 	orr.w	r2, r3, #32
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f000 8249 	beq.w	8003688 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80031f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031fa:	f003 0320 	and.w	r3, r3, #32
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d013      	beq.n	800322a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003202:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003206:	f003 0320 	and.w	r3, r3, #32
 800320a:	2b00      	cmp	r3, #0
 800320c:	d105      	bne.n	800321a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800320e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d007      	beq.n	800322a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800321e:	2b00      	cmp	r3, #0
 8003220:	d003      	beq.n	800322a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003230:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800323e:	2b40      	cmp	r3, #64	; 0x40
 8003240:	d005      	beq.n	800324e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003242:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003246:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800324a:	2b00      	cmp	r3, #0
 800324c:	d054      	beq.n	80032f8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f001 f812 	bl	8004278 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800325e:	2b40      	cmp	r3, #64	; 0x40
 8003260:	d146      	bne.n	80032f0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	3308      	adds	r3, #8
 8003268:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800326c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003270:	e853 3f00 	ldrex	r3, [r3]
 8003274:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003278:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800327c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003280:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	3308      	adds	r3, #8
 800328a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800328e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003292:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003296:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800329a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800329e:	e841 2300 	strex	r3, r2, [r1]
 80032a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80032a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1d9      	bne.n	8003262 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d017      	beq.n	80032e8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032be:	4a15      	ldr	r2, [pc, #84]	; (8003314 <HAL_UART_IRQHandler+0x2c0>)
 80032c0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7fd fecc 	bl	8001066 <HAL_DMA_Abort_IT>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d019      	beq.n	8003308 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80032e2:	4610      	mov	r0, r2
 80032e4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032e6:	e00f      	b.n	8003308 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f000 f9d7 	bl	800369c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032ee:	e00b      	b.n	8003308 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f000 f9d3 	bl	800369c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032f6:	e007      	b.n	8003308 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f000 f9cf 	bl	800369c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8003306:	e1bf      	b.n	8003688 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003308:	bf00      	nop
    return;
 800330a:	e1bd      	b.n	8003688 <HAL_UART_IRQHandler+0x634>
 800330c:	10000001 	.word	0x10000001
 8003310:	04000120 	.word	0x04000120
 8003314:	08004345 	.word	0x08004345

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800331c:	2b01      	cmp	r3, #1
 800331e:	f040 8153 	bne.w	80035c8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003326:	f003 0310 	and.w	r3, r3, #16
 800332a:	2b00      	cmp	r3, #0
 800332c:	f000 814c 	beq.w	80035c8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003334:	f003 0310 	and.w	r3, r3, #16
 8003338:	2b00      	cmp	r3, #0
 800333a:	f000 8145 	beq.w	80035c8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2210      	movs	r2, #16
 8003344:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003350:	2b40      	cmp	r3, #64	; 0x40
 8003352:	f040 80bb 	bne.w	80034cc <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003364:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003368:	2b00      	cmp	r3, #0
 800336a:	f000 818f 	beq.w	800368c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003374:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003378:	429a      	cmp	r2, r3
 800337a:	f080 8187 	bcs.w	800368c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003384:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0320 	and.w	r3, r3, #32
 8003396:	2b00      	cmp	r3, #0
 8003398:	f040 8087 	bne.w	80034aa <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80033a8:	e853 3f00 	ldrex	r3, [r3]
 80033ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80033b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	461a      	mov	r2, r3
 80033c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80033c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80033ca:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80033d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80033d6:	e841 2300 	strex	r3, r2, [r1]
 80033da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80033de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1da      	bne.n	800339c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	3308      	adds	r3, #8
 80033ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033f0:	e853 3f00 	ldrex	r3, [r3]
 80033f4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80033f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033f8:	f023 0301 	bic.w	r3, r3, #1
 80033fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	3308      	adds	r3, #8
 8003406:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800340a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800340e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003410:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003412:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003416:	e841 2300 	strex	r3, r2, [r1]
 800341a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800341c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1e1      	bne.n	80033e6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	3308      	adds	r3, #8
 8003428:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800342a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800342c:	e853 3f00 	ldrex	r3, [r3]
 8003430:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003432:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003434:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003438:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	3308      	adds	r3, #8
 8003442:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003446:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003448:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800344a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800344c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800344e:	e841 2300 	strex	r3, r2, [r1]
 8003452:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003454:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1e3      	bne.n	8003422 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2220      	movs	r2, #32
 800345e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800346e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003470:	e853 3f00 	ldrex	r3, [r3]
 8003474:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003476:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003478:	f023 0310 	bic.w	r3, r3, #16
 800347c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	461a      	mov	r2, r3
 8003486:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800348a:	65bb      	str	r3, [r7, #88]	; 0x58
 800348c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800348e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003490:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003492:	e841 2300 	strex	r3, r2, [r1]
 8003496:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003498:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1e4      	bne.n	8003468 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7fd fd85 	bl	8000fb4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2202      	movs	r2, #2
 80034ae:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80034bc:	b29b      	uxth	r3, r3
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	4619      	mov	r1, r3
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f000 f8f3 	bl	80036b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80034ca:	e0df      	b.n	800368c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80034d8:	b29b      	uxth	r3, r3
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	f000 80d1 	beq.w	8003690 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80034ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f000 80cc 	beq.w	8003690 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003500:	e853 3f00 	ldrex	r3, [r3]
 8003504:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003508:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800350c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	461a      	mov	r2, r3
 8003516:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800351a:	647b      	str	r3, [r7, #68]	; 0x44
 800351c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800351e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003520:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003522:	e841 2300 	strex	r3, r2, [r1]
 8003526:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1e4      	bne.n	80034f8 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	3308      	adds	r3, #8
 8003534:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003538:	e853 3f00 	ldrex	r3, [r3]
 800353c:	623b      	str	r3, [r7, #32]
   return(result);
 800353e:	6a3b      	ldr	r3, [r7, #32]
 8003540:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003544:	f023 0301 	bic.w	r3, r3, #1
 8003548:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	3308      	adds	r3, #8
 8003552:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003556:	633a      	str	r2, [r7, #48]	; 0x30
 8003558:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800355a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800355c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800355e:	e841 2300 	strex	r3, r2, [r1]
 8003562:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1e1      	bne.n	800352e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2220      	movs	r2, #32
 800356e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	e853 3f00 	ldrex	r3, [r3]
 800358a:	60fb      	str	r3, [r7, #12]
   return(result);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f023 0310 	bic.w	r3, r3, #16
 8003592:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	461a      	mov	r2, r3
 800359c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80035a0:	61fb      	str	r3, [r7, #28]
 80035a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a4:	69b9      	ldr	r1, [r7, #24]
 80035a6:	69fa      	ldr	r2, [r7, #28]
 80035a8:	e841 2300 	strex	r3, r2, [r1]
 80035ac:	617b      	str	r3, [r7, #20]
   return(result);
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1e4      	bne.n	800357e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2202      	movs	r2, #2
 80035b8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80035ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80035be:	4619      	mov	r1, r3
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f000 f875 	bl	80036b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80035c6:	e063      	b.n	8003690 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80035c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00e      	beq.n	80035f2 <HAL_UART_IRQHandler+0x59e>
 80035d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d008      	beq.n	80035f2 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80035e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f001 fdaa 	bl	8005144 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80035f0:	e051      	b.n	8003696 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80035f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d014      	beq.n	8003628 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80035fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003606:	2b00      	cmp	r3, #0
 8003608:	d105      	bne.n	8003616 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800360a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800360e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d008      	beq.n	8003628 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800361a:	2b00      	cmp	r3, #0
 800361c:	d03a      	beq.n	8003694 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	4798      	blx	r3
    }
    return;
 8003626:	e035      	b.n	8003694 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800362c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003630:	2b00      	cmp	r3, #0
 8003632:	d009      	beq.n	8003648 <HAL_UART_IRQHandler+0x5f4>
 8003634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800363c:	2b00      	cmp	r3, #0
 800363e:	d003      	beq.n	8003648 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f001 f837 	bl	80046b4 <UART_EndTransmit_IT>
    return;
 8003646:	e026      	b.n	8003696 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800364c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d009      	beq.n	8003668 <HAL_UART_IRQHandler+0x614>
 8003654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003658:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d003      	beq.n	8003668 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f001 fd83 	bl	800516c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003666:	e016      	b.n	8003696 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800366c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d010      	beq.n	8003696 <HAL_UART_IRQHandler+0x642>
 8003674:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003678:	2b00      	cmp	r3, #0
 800367a:	da0c      	bge.n	8003696 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f001 fd6b 	bl	8005158 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003682:	e008      	b.n	8003696 <HAL_UART_IRQHandler+0x642>
      return;
 8003684:	bf00      	nop
 8003686:	e006      	b.n	8003696 <HAL_UART_IRQHandler+0x642>
    return;
 8003688:	bf00      	nop
 800368a:	e004      	b.n	8003696 <HAL_UART_IRQHandler+0x642>
      return;
 800368c:	bf00      	nop
 800368e:	e002      	b.n	8003696 <HAL_UART_IRQHandler+0x642>
      return;
 8003690:	bf00      	nop
 8003692:	e000      	b.n	8003696 <HAL_UART_IRQHandler+0x642>
    return;
 8003694:	bf00      	nop
  }
}
 8003696:	37e8      	adds	r7, #232	; 0xe8
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	460b      	mov	r3, r1
 80036ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036cc:	b08c      	sub	sp, #48	; 0x30
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80036d2:	2300      	movs	r3, #0
 80036d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	689a      	ldr	r2, [r3, #8]
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	431a      	orrs	r2, r3
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	431a      	orrs	r2, r3
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	69db      	ldr	r3, [r3, #28]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	4baa      	ldr	r3, [pc, #680]	; (80039a0 <UART_SetConfig+0x2d8>)
 80036f8:	4013      	ands	r3, r2
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	6812      	ldr	r2, [r2, #0]
 80036fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003700:	430b      	orrs	r3, r1
 8003702:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	68da      	ldr	r2, [r3, #12]
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	430a      	orrs	r2, r1
 8003718:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a9f      	ldr	r2, [pc, #636]	; (80039a4 <UART_SetConfig+0x2dc>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d004      	beq.n	8003734 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003730:	4313      	orrs	r3, r2
 8003732:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800373e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	6812      	ldr	r2, [r2, #0]
 8003746:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003748:	430b      	orrs	r3, r1
 800374a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003752:	f023 010f 	bic.w	r1, r3, #15
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	430a      	orrs	r2, r1
 8003760:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a90      	ldr	r2, [pc, #576]	; (80039a8 <UART_SetConfig+0x2e0>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d125      	bne.n	80037b8 <UART_SetConfig+0xf0>
 800376c:	4b8f      	ldr	r3, [pc, #572]	; (80039ac <UART_SetConfig+0x2e4>)
 800376e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003772:	f003 0303 	and.w	r3, r3, #3
 8003776:	2b03      	cmp	r3, #3
 8003778:	d81a      	bhi.n	80037b0 <UART_SetConfig+0xe8>
 800377a:	a201      	add	r2, pc, #4	; (adr r2, 8003780 <UART_SetConfig+0xb8>)
 800377c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003780:	08003791 	.word	0x08003791
 8003784:	080037a1 	.word	0x080037a1
 8003788:	08003799 	.word	0x08003799
 800378c:	080037a9 	.word	0x080037a9
 8003790:	2301      	movs	r3, #1
 8003792:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003796:	e116      	b.n	80039c6 <UART_SetConfig+0x2fe>
 8003798:	2302      	movs	r3, #2
 800379a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800379e:	e112      	b.n	80039c6 <UART_SetConfig+0x2fe>
 80037a0:	2304      	movs	r3, #4
 80037a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037a6:	e10e      	b.n	80039c6 <UART_SetConfig+0x2fe>
 80037a8:	2308      	movs	r3, #8
 80037aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037ae:	e10a      	b.n	80039c6 <UART_SetConfig+0x2fe>
 80037b0:	2310      	movs	r3, #16
 80037b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037b6:	e106      	b.n	80039c6 <UART_SetConfig+0x2fe>
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a7c      	ldr	r2, [pc, #496]	; (80039b0 <UART_SetConfig+0x2e8>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d138      	bne.n	8003834 <UART_SetConfig+0x16c>
 80037c2:	4b7a      	ldr	r3, [pc, #488]	; (80039ac <UART_SetConfig+0x2e4>)
 80037c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c8:	f003 030c 	and.w	r3, r3, #12
 80037cc:	2b0c      	cmp	r3, #12
 80037ce:	d82d      	bhi.n	800382c <UART_SetConfig+0x164>
 80037d0:	a201      	add	r2, pc, #4	; (adr r2, 80037d8 <UART_SetConfig+0x110>)
 80037d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d6:	bf00      	nop
 80037d8:	0800380d 	.word	0x0800380d
 80037dc:	0800382d 	.word	0x0800382d
 80037e0:	0800382d 	.word	0x0800382d
 80037e4:	0800382d 	.word	0x0800382d
 80037e8:	0800381d 	.word	0x0800381d
 80037ec:	0800382d 	.word	0x0800382d
 80037f0:	0800382d 	.word	0x0800382d
 80037f4:	0800382d 	.word	0x0800382d
 80037f8:	08003815 	.word	0x08003815
 80037fc:	0800382d 	.word	0x0800382d
 8003800:	0800382d 	.word	0x0800382d
 8003804:	0800382d 	.word	0x0800382d
 8003808:	08003825 	.word	0x08003825
 800380c:	2300      	movs	r3, #0
 800380e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003812:	e0d8      	b.n	80039c6 <UART_SetConfig+0x2fe>
 8003814:	2302      	movs	r3, #2
 8003816:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800381a:	e0d4      	b.n	80039c6 <UART_SetConfig+0x2fe>
 800381c:	2304      	movs	r3, #4
 800381e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003822:	e0d0      	b.n	80039c6 <UART_SetConfig+0x2fe>
 8003824:	2308      	movs	r3, #8
 8003826:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800382a:	e0cc      	b.n	80039c6 <UART_SetConfig+0x2fe>
 800382c:	2310      	movs	r3, #16
 800382e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003832:	e0c8      	b.n	80039c6 <UART_SetConfig+0x2fe>
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a5e      	ldr	r2, [pc, #376]	; (80039b4 <UART_SetConfig+0x2ec>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d125      	bne.n	800388a <UART_SetConfig+0x1c2>
 800383e:	4b5b      	ldr	r3, [pc, #364]	; (80039ac <UART_SetConfig+0x2e4>)
 8003840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003844:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003848:	2b30      	cmp	r3, #48	; 0x30
 800384a:	d016      	beq.n	800387a <UART_SetConfig+0x1b2>
 800384c:	2b30      	cmp	r3, #48	; 0x30
 800384e:	d818      	bhi.n	8003882 <UART_SetConfig+0x1ba>
 8003850:	2b20      	cmp	r3, #32
 8003852:	d00a      	beq.n	800386a <UART_SetConfig+0x1a2>
 8003854:	2b20      	cmp	r3, #32
 8003856:	d814      	bhi.n	8003882 <UART_SetConfig+0x1ba>
 8003858:	2b00      	cmp	r3, #0
 800385a:	d002      	beq.n	8003862 <UART_SetConfig+0x19a>
 800385c:	2b10      	cmp	r3, #16
 800385e:	d008      	beq.n	8003872 <UART_SetConfig+0x1aa>
 8003860:	e00f      	b.n	8003882 <UART_SetConfig+0x1ba>
 8003862:	2300      	movs	r3, #0
 8003864:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003868:	e0ad      	b.n	80039c6 <UART_SetConfig+0x2fe>
 800386a:	2302      	movs	r3, #2
 800386c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003870:	e0a9      	b.n	80039c6 <UART_SetConfig+0x2fe>
 8003872:	2304      	movs	r3, #4
 8003874:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003878:	e0a5      	b.n	80039c6 <UART_SetConfig+0x2fe>
 800387a:	2308      	movs	r3, #8
 800387c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003880:	e0a1      	b.n	80039c6 <UART_SetConfig+0x2fe>
 8003882:	2310      	movs	r3, #16
 8003884:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003888:	e09d      	b.n	80039c6 <UART_SetConfig+0x2fe>
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a4a      	ldr	r2, [pc, #296]	; (80039b8 <UART_SetConfig+0x2f0>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d125      	bne.n	80038e0 <UART_SetConfig+0x218>
 8003894:	4b45      	ldr	r3, [pc, #276]	; (80039ac <UART_SetConfig+0x2e4>)
 8003896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800389a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800389e:	2bc0      	cmp	r3, #192	; 0xc0
 80038a0:	d016      	beq.n	80038d0 <UART_SetConfig+0x208>
 80038a2:	2bc0      	cmp	r3, #192	; 0xc0
 80038a4:	d818      	bhi.n	80038d8 <UART_SetConfig+0x210>
 80038a6:	2b80      	cmp	r3, #128	; 0x80
 80038a8:	d00a      	beq.n	80038c0 <UART_SetConfig+0x1f8>
 80038aa:	2b80      	cmp	r3, #128	; 0x80
 80038ac:	d814      	bhi.n	80038d8 <UART_SetConfig+0x210>
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d002      	beq.n	80038b8 <UART_SetConfig+0x1f0>
 80038b2:	2b40      	cmp	r3, #64	; 0x40
 80038b4:	d008      	beq.n	80038c8 <UART_SetConfig+0x200>
 80038b6:	e00f      	b.n	80038d8 <UART_SetConfig+0x210>
 80038b8:	2300      	movs	r3, #0
 80038ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038be:	e082      	b.n	80039c6 <UART_SetConfig+0x2fe>
 80038c0:	2302      	movs	r3, #2
 80038c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038c6:	e07e      	b.n	80039c6 <UART_SetConfig+0x2fe>
 80038c8:	2304      	movs	r3, #4
 80038ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038ce:	e07a      	b.n	80039c6 <UART_SetConfig+0x2fe>
 80038d0:	2308      	movs	r3, #8
 80038d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038d6:	e076      	b.n	80039c6 <UART_SetConfig+0x2fe>
 80038d8:	2310      	movs	r3, #16
 80038da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038de:	e072      	b.n	80039c6 <UART_SetConfig+0x2fe>
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a35      	ldr	r2, [pc, #212]	; (80039bc <UART_SetConfig+0x2f4>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d12a      	bne.n	8003940 <UART_SetConfig+0x278>
 80038ea:	4b30      	ldr	r3, [pc, #192]	; (80039ac <UART_SetConfig+0x2e4>)
 80038ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038f8:	d01a      	beq.n	8003930 <UART_SetConfig+0x268>
 80038fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038fe:	d81b      	bhi.n	8003938 <UART_SetConfig+0x270>
 8003900:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003904:	d00c      	beq.n	8003920 <UART_SetConfig+0x258>
 8003906:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800390a:	d815      	bhi.n	8003938 <UART_SetConfig+0x270>
 800390c:	2b00      	cmp	r3, #0
 800390e:	d003      	beq.n	8003918 <UART_SetConfig+0x250>
 8003910:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003914:	d008      	beq.n	8003928 <UART_SetConfig+0x260>
 8003916:	e00f      	b.n	8003938 <UART_SetConfig+0x270>
 8003918:	2300      	movs	r3, #0
 800391a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800391e:	e052      	b.n	80039c6 <UART_SetConfig+0x2fe>
 8003920:	2302      	movs	r3, #2
 8003922:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003926:	e04e      	b.n	80039c6 <UART_SetConfig+0x2fe>
 8003928:	2304      	movs	r3, #4
 800392a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800392e:	e04a      	b.n	80039c6 <UART_SetConfig+0x2fe>
 8003930:	2308      	movs	r3, #8
 8003932:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003936:	e046      	b.n	80039c6 <UART_SetConfig+0x2fe>
 8003938:	2310      	movs	r3, #16
 800393a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800393e:	e042      	b.n	80039c6 <UART_SetConfig+0x2fe>
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a17      	ldr	r2, [pc, #92]	; (80039a4 <UART_SetConfig+0x2dc>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d13a      	bne.n	80039c0 <UART_SetConfig+0x2f8>
 800394a:	4b18      	ldr	r3, [pc, #96]	; (80039ac <UART_SetConfig+0x2e4>)
 800394c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003950:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003954:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003958:	d01a      	beq.n	8003990 <UART_SetConfig+0x2c8>
 800395a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800395e:	d81b      	bhi.n	8003998 <UART_SetConfig+0x2d0>
 8003960:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003964:	d00c      	beq.n	8003980 <UART_SetConfig+0x2b8>
 8003966:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800396a:	d815      	bhi.n	8003998 <UART_SetConfig+0x2d0>
 800396c:	2b00      	cmp	r3, #0
 800396e:	d003      	beq.n	8003978 <UART_SetConfig+0x2b0>
 8003970:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003974:	d008      	beq.n	8003988 <UART_SetConfig+0x2c0>
 8003976:	e00f      	b.n	8003998 <UART_SetConfig+0x2d0>
 8003978:	2300      	movs	r3, #0
 800397a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800397e:	e022      	b.n	80039c6 <UART_SetConfig+0x2fe>
 8003980:	2302      	movs	r3, #2
 8003982:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003986:	e01e      	b.n	80039c6 <UART_SetConfig+0x2fe>
 8003988:	2304      	movs	r3, #4
 800398a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800398e:	e01a      	b.n	80039c6 <UART_SetConfig+0x2fe>
 8003990:	2308      	movs	r3, #8
 8003992:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003996:	e016      	b.n	80039c6 <UART_SetConfig+0x2fe>
 8003998:	2310      	movs	r3, #16
 800399a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800399e:	e012      	b.n	80039c6 <UART_SetConfig+0x2fe>
 80039a0:	cfff69f3 	.word	0xcfff69f3
 80039a4:	40008000 	.word	0x40008000
 80039a8:	40013800 	.word	0x40013800
 80039ac:	40021000 	.word	0x40021000
 80039b0:	40004400 	.word	0x40004400
 80039b4:	40004800 	.word	0x40004800
 80039b8:	40004c00 	.word	0x40004c00
 80039bc:	40005000 	.word	0x40005000
 80039c0:	2310      	movs	r3, #16
 80039c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4aae      	ldr	r2, [pc, #696]	; (8003c84 <UART_SetConfig+0x5bc>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	f040 8097 	bne.w	8003b00 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80039d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80039d6:	2b08      	cmp	r3, #8
 80039d8:	d823      	bhi.n	8003a22 <UART_SetConfig+0x35a>
 80039da:	a201      	add	r2, pc, #4	; (adr r2, 80039e0 <UART_SetConfig+0x318>)
 80039dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e0:	08003a05 	.word	0x08003a05
 80039e4:	08003a23 	.word	0x08003a23
 80039e8:	08003a0d 	.word	0x08003a0d
 80039ec:	08003a23 	.word	0x08003a23
 80039f0:	08003a13 	.word	0x08003a13
 80039f4:	08003a23 	.word	0x08003a23
 80039f8:	08003a23 	.word	0x08003a23
 80039fc:	08003a23 	.word	0x08003a23
 8003a00:	08003a1b 	.word	0x08003a1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a04:	f7fe fb8a 	bl	800211c <HAL_RCC_GetPCLK1Freq>
 8003a08:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003a0a:	e010      	b.n	8003a2e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a0c:	4b9e      	ldr	r3, [pc, #632]	; (8003c88 <UART_SetConfig+0x5c0>)
 8003a0e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003a10:	e00d      	b.n	8003a2e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a12:	f7fe fb15 	bl	8002040 <HAL_RCC_GetSysClockFreq>
 8003a16:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003a18:	e009      	b.n	8003a2e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003a20:	e005      	b.n	8003a2e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003a22:	2300      	movs	r3, #0
 8003a24:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003a2c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f000 8130 	beq.w	8003c96 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3a:	4a94      	ldr	r2, [pc, #592]	; (8003c8c <UART_SetConfig+0x5c4>)
 8003a3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a40:	461a      	mov	r2, r3
 8003a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a44:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a48:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	685a      	ldr	r2, [r3, #4]
 8003a4e:	4613      	mov	r3, r2
 8003a50:	005b      	lsls	r3, r3, #1
 8003a52:	4413      	add	r3, r2
 8003a54:	69ba      	ldr	r2, [r7, #24]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d305      	bcc.n	8003a66 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d903      	bls.n	8003a6e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003a6c:	e113      	b.n	8003c96 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a70:	2200      	movs	r2, #0
 8003a72:	60bb      	str	r3, [r7, #8]
 8003a74:	60fa      	str	r2, [r7, #12]
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7a:	4a84      	ldr	r2, [pc, #528]	; (8003c8c <UART_SetConfig+0x5c4>)
 8003a7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	2200      	movs	r2, #0
 8003a84:	603b      	str	r3, [r7, #0]
 8003a86:	607a      	str	r2, [r7, #4]
 8003a88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a8c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003a90:	f7fc fbc2 	bl	8000218 <__aeabi_uldivmod>
 8003a94:	4602      	mov	r2, r0
 8003a96:	460b      	mov	r3, r1
 8003a98:	4610      	mov	r0, r2
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	f04f 0200 	mov.w	r2, #0
 8003aa0:	f04f 0300 	mov.w	r3, #0
 8003aa4:	020b      	lsls	r3, r1, #8
 8003aa6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003aaa:	0202      	lsls	r2, r0, #8
 8003aac:	6979      	ldr	r1, [r7, #20]
 8003aae:	6849      	ldr	r1, [r1, #4]
 8003ab0:	0849      	lsrs	r1, r1, #1
 8003ab2:	2000      	movs	r0, #0
 8003ab4:	460c      	mov	r4, r1
 8003ab6:	4605      	mov	r5, r0
 8003ab8:	eb12 0804 	adds.w	r8, r2, r4
 8003abc:	eb43 0905 	adc.w	r9, r3, r5
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	469a      	mov	sl, r3
 8003ac8:	4693      	mov	fp, r2
 8003aca:	4652      	mov	r2, sl
 8003acc:	465b      	mov	r3, fp
 8003ace:	4640      	mov	r0, r8
 8003ad0:	4649      	mov	r1, r9
 8003ad2:	f7fc fba1 	bl	8000218 <__aeabi_uldivmod>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	460b      	mov	r3, r1
 8003ada:	4613      	mov	r3, r2
 8003adc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ade:	6a3b      	ldr	r3, [r7, #32]
 8003ae0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ae4:	d308      	bcc.n	8003af8 <UART_SetConfig+0x430>
 8003ae6:	6a3b      	ldr	r3, [r7, #32]
 8003ae8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003aec:	d204      	bcs.n	8003af8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	6a3a      	ldr	r2, [r7, #32]
 8003af4:	60da      	str	r2, [r3, #12]
 8003af6:	e0ce      	b.n	8003c96 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003afe:	e0ca      	b.n	8003c96 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	69db      	ldr	r3, [r3, #28]
 8003b04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b08:	d166      	bne.n	8003bd8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003b0a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003b0e:	2b08      	cmp	r3, #8
 8003b10:	d827      	bhi.n	8003b62 <UART_SetConfig+0x49a>
 8003b12:	a201      	add	r2, pc, #4	; (adr r2, 8003b18 <UART_SetConfig+0x450>)
 8003b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b18:	08003b3d 	.word	0x08003b3d
 8003b1c:	08003b45 	.word	0x08003b45
 8003b20:	08003b4d 	.word	0x08003b4d
 8003b24:	08003b63 	.word	0x08003b63
 8003b28:	08003b53 	.word	0x08003b53
 8003b2c:	08003b63 	.word	0x08003b63
 8003b30:	08003b63 	.word	0x08003b63
 8003b34:	08003b63 	.word	0x08003b63
 8003b38:	08003b5b 	.word	0x08003b5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b3c:	f7fe faee 	bl	800211c <HAL_RCC_GetPCLK1Freq>
 8003b40:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b42:	e014      	b.n	8003b6e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b44:	f7fe fb00 	bl	8002148 <HAL_RCC_GetPCLK2Freq>
 8003b48:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b4a:	e010      	b.n	8003b6e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b4c:	4b4e      	ldr	r3, [pc, #312]	; (8003c88 <UART_SetConfig+0x5c0>)
 8003b4e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003b50:	e00d      	b.n	8003b6e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b52:	f7fe fa75 	bl	8002040 <HAL_RCC_GetSysClockFreq>
 8003b56:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b58:	e009      	b.n	8003b6e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003b60:	e005      	b.n	8003b6e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003b62:	2300      	movs	r3, #0
 8003b64:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003b6c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f000 8090 	beq.w	8003c96 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7a:	4a44      	ldr	r2, [pc, #272]	; (8003c8c <UART_SetConfig+0x5c4>)
 8003b7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b80:	461a      	mov	r2, r3
 8003b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b84:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b88:	005a      	lsls	r2, r3, #1
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	085b      	lsrs	r3, r3, #1
 8003b90:	441a      	add	r2, r3
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b9a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b9c:	6a3b      	ldr	r3, [r7, #32]
 8003b9e:	2b0f      	cmp	r3, #15
 8003ba0:	d916      	bls.n	8003bd0 <UART_SetConfig+0x508>
 8003ba2:	6a3b      	ldr	r3, [r7, #32]
 8003ba4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ba8:	d212      	bcs.n	8003bd0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003baa:	6a3b      	ldr	r3, [r7, #32]
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	f023 030f 	bic.w	r3, r3, #15
 8003bb2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003bb4:	6a3b      	ldr	r3, [r7, #32]
 8003bb6:	085b      	lsrs	r3, r3, #1
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	f003 0307 	and.w	r3, r3, #7
 8003bbe:	b29a      	uxth	r2, r3
 8003bc0:	8bfb      	ldrh	r3, [r7, #30]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	8bfa      	ldrh	r2, [r7, #30]
 8003bcc:	60da      	str	r2, [r3, #12]
 8003bce:	e062      	b.n	8003c96 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003bd6:	e05e      	b.n	8003c96 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003bd8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003bdc:	2b08      	cmp	r3, #8
 8003bde:	d828      	bhi.n	8003c32 <UART_SetConfig+0x56a>
 8003be0:	a201      	add	r2, pc, #4	; (adr r2, 8003be8 <UART_SetConfig+0x520>)
 8003be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be6:	bf00      	nop
 8003be8:	08003c0d 	.word	0x08003c0d
 8003bec:	08003c15 	.word	0x08003c15
 8003bf0:	08003c1d 	.word	0x08003c1d
 8003bf4:	08003c33 	.word	0x08003c33
 8003bf8:	08003c23 	.word	0x08003c23
 8003bfc:	08003c33 	.word	0x08003c33
 8003c00:	08003c33 	.word	0x08003c33
 8003c04:	08003c33 	.word	0x08003c33
 8003c08:	08003c2b 	.word	0x08003c2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c0c:	f7fe fa86 	bl	800211c <HAL_RCC_GetPCLK1Freq>
 8003c10:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c12:	e014      	b.n	8003c3e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c14:	f7fe fa98 	bl	8002148 <HAL_RCC_GetPCLK2Freq>
 8003c18:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c1a:	e010      	b.n	8003c3e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c1c:	4b1a      	ldr	r3, [pc, #104]	; (8003c88 <UART_SetConfig+0x5c0>)
 8003c1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003c20:	e00d      	b.n	8003c3e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c22:	f7fe fa0d 	bl	8002040 <HAL_RCC_GetSysClockFreq>
 8003c26:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c28:	e009      	b.n	8003c3e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003c30:	e005      	b.n	8003c3e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003c32:	2300      	movs	r3, #0
 8003c34:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003c3c:	bf00      	nop
    }

    if (pclk != 0U)
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d028      	beq.n	8003c96 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c48:	4a10      	ldr	r2, [pc, #64]	; (8003c8c <UART_SetConfig+0x5c4>)
 8003c4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c4e:	461a      	mov	r2, r3
 8003c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c52:	fbb3 f2f2 	udiv	r2, r3, r2
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	085b      	lsrs	r3, r3, #1
 8003c5c:	441a      	add	r2, r3
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c66:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c68:	6a3b      	ldr	r3, [r7, #32]
 8003c6a:	2b0f      	cmp	r3, #15
 8003c6c:	d910      	bls.n	8003c90 <UART_SetConfig+0x5c8>
 8003c6e:	6a3b      	ldr	r3, [r7, #32]
 8003c70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c74:	d20c      	bcs.n	8003c90 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c76:	6a3b      	ldr	r3, [r7, #32]
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	60da      	str	r2, [r3, #12]
 8003c80:	e009      	b.n	8003c96 <UART_SetConfig+0x5ce>
 8003c82:	bf00      	nop
 8003c84:	40008000 	.word	0x40008000
 8003c88:	00f42400 	.word	0x00f42400
 8003c8c:	08005410 	.word	0x08005410
      }
      else
      {
        ret = HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003cb2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3730      	adds	r7, #48	; 0x30
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003cc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ccc:	f003 0308 	and.w	r3, r3, #8
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d00a      	beq.n	8003cea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cee:	f003 0301 	and.w	r3, r3, #1
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00a      	beq.n	8003d0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00a      	beq.n	8003d2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d32:	f003 0304 	and.w	r3, r3, #4
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00a      	beq.n	8003d50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d54:	f003 0310 	and.w	r3, r3, #16
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00a      	beq.n	8003d72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d76:	f003 0320 	and.w	r3, r3, #32
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00a      	beq.n	8003d94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	430a      	orrs	r2, r1
 8003d92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d01a      	beq.n	8003dd6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	430a      	orrs	r2, r1
 8003db4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dbe:	d10a      	bne.n	8003dd6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00a      	beq.n	8003df8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	430a      	orrs	r2, r1
 8003df6:	605a      	str	r2, [r3, #4]
  }
}
 8003df8:	bf00      	nop
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b098      	sub	sp, #96	; 0x60
 8003e08:	af02      	add	r7, sp, #8
 8003e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e14:	f7fc ff0a 	bl	8000c2c <HAL_GetTick>
 8003e18:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0308 	and.w	r3, r3, #8
 8003e24:	2b08      	cmp	r3, #8
 8003e26:	d12f      	bne.n	8003e88 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e30:	2200      	movs	r2, #0
 8003e32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 f88e 	bl	8003f58 <UART_WaitOnFlagUntilTimeout>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d022      	beq.n	8003e88 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e4a:	e853 3f00 	ldrex	r3, [r3]
 8003e4e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e56:	653b      	str	r3, [r7, #80]	; 0x50
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e60:	647b      	str	r3, [r7, #68]	; 0x44
 8003e62:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e64:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e68:	e841 2300 	strex	r3, r2, [r1]
 8003e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1e6      	bne.n	8003e42 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2220      	movs	r2, #32
 8003e78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e063      	b.n	8003f50 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0304 	and.w	r3, r3, #4
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	d149      	bne.n	8003f2a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e96:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e9a:	9300      	str	r3, [sp, #0]
 8003e9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f000 f857 	bl	8003f58 <UART_WaitOnFlagUntilTimeout>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d03c      	beq.n	8003f2a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb8:	e853 3f00 	ldrex	r3, [r3]
 8003ebc:	623b      	str	r3, [r7, #32]
   return(result);
 8003ebe:	6a3b      	ldr	r3, [r7, #32]
 8003ec0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ec4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	461a      	mov	r2, r3
 8003ecc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ece:	633b      	str	r3, [r7, #48]	; 0x30
 8003ed0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ed4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ed6:	e841 2300 	strex	r3, r2, [r1]
 8003eda:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d1e6      	bne.n	8003eb0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	3308      	adds	r3, #8
 8003ee8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	e853 3f00 	ldrex	r3, [r3]
 8003ef0:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f023 0301 	bic.w	r3, r3, #1
 8003ef8:	64bb      	str	r3, [r7, #72]	; 0x48
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	3308      	adds	r3, #8
 8003f00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f02:	61fa      	str	r2, [r7, #28]
 8003f04:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f06:	69b9      	ldr	r1, [r7, #24]
 8003f08:	69fa      	ldr	r2, [r7, #28]
 8003f0a:	e841 2300 	strex	r3, r2, [r1]
 8003f0e:	617b      	str	r3, [r7, #20]
   return(result);
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1e5      	bne.n	8003ee2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2220      	movs	r2, #32
 8003f1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e012      	b.n	8003f50 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2220      	movs	r2, #32
 8003f2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2220      	movs	r2, #32
 8003f36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3758      	adds	r7, #88	; 0x58
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	603b      	str	r3, [r7, #0]
 8003f64:	4613      	mov	r3, r2
 8003f66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f68:	e04f      	b.n	800400a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f70:	d04b      	beq.n	800400a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f72:	f7fc fe5b 	bl	8000c2c <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d302      	bcc.n	8003f88 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d101      	bne.n	8003f8c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e04e      	b.n	800402a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0304 	and.w	r3, r3, #4
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d037      	beq.n	800400a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	2b80      	cmp	r3, #128	; 0x80
 8003f9e:	d034      	beq.n	800400a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	2b40      	cmp	r3, #64	; 0x40
 8003fa4:	d031      	beq.n	800400a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	69db      	ldr	r3, [r3, #28]
 8003fac:	f003 0308 	and.w	r3, r3, #8
 8003fb0:	2b08      	cmp	r3, #8
 8003fb2:	d110      	bne.n	8003fd6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2208      	movs	r2, #8
 8003fba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003fbc:	68f8      	ldr	r0, [r7, #12]
 8003fbe:	f000 f95b 	bl	8004278 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2208      	movs	r2, #8
 8003fc6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e029      	b.n	800402a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	69db      	ldr	r3, [r3, #28]
 8003fdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fe0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fe4:	d111      	bne.n	800400a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ff0:	68f8      	ldr	r0, [r7, #12]
 8003ff2:	f000 f941 	bl	8004278 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2220      	movs	r2, #32
 8003ffa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e00f      	b.n	800402a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	69da      	ldr	r2, [r3, #28]
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	4013      	ands	r3, r2
 8004014:	68ba      	ldr	r2, [r7, #8]
 8004016:	429a      	cmp	r2, r3
 8004018:	bf0c      	ite	eq
 800401a:	2301      	moveq	r3, #1
 800401c:	2300      	movne	r3, #0
 800401e:	b2db      	uxtb	r3, r3
 8004020:	461a      	mov	r2, r3
 8004022:	79fb      	ldrb	r3, [r7, #7]
 8004024:	429a      	cmp	r2, r3
 8004026:	d0a0      	beq.n	8003f6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3710      	adds	r7, #16
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
	...

08004034 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004034:	b480      	push	{r7}
 8004036:	b0a3      	sub	sp, #140	; 0x8c
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	4613      	mov	r3, r2
 8004040:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	68ba      	ldr	r2, [r7, #8]
 8004046:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	88fa      	ldrh	r2, [r7, #6]
 800404c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	88fa      	ldrh	r2, [r7, #6]
 8004054:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004066:	d10e      	bne.n	8004086 <UART_Start_Receive_IT+0x52>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d105      	bne.n	800407c <UART_Start_Receive_IT+0x48>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004076:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800407a:	e02d      	b.n	80040d8 <UART_Start_Receive_IT+0xa4>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	22ff      	movs	r2, #255	; 0xff
 8004080:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004084:	e028      	b.n	80040d8 <UART_Start_Receive_IT+0xa4>
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d10d      	bne.n	80040aa <UART_Start_Receive_IT+0x76>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d104      	bne.n	80040a0 <UART_Start_Receive_IT+0x6c>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	22ff      	movs	r2, #255	; 0xff
 800409a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800409e:	e01b      	b.n	80040d8 <UART_Start_Receive_IT+0xa4>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	227f      	movs	r2, #127	; 0x7f
 80040a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80040a8:	e016      	b.n	80040d8 <UART_Start_Receive_IT+0xa4>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040b2:	d10d      	bne.n	80040d0 <UART_Start_Receive_IT+0x9c>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d104      	bne.n	80040c6 <UART_Start_Receive_IT+0x92>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	227f      	movs	r2, #127	; 0x7f
 80040c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80040c4:	e008      	b.n	80040d8 <UART_Start_Receive_IT+0xa4>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	223f      	movs	r2, #63	; 0x3f
 80040ca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80040ce:	e003      	b.n	80040d8 <UART_Start_Receive_IT+0xa4>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2200      	movs	r2, #0
 80040dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2222      	movs	r2, #34	; 0x22
 80040e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	3308      	adds	r3, #8
 80040ee:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040f2:	e853 3f00 	ldrex	r3, [r3]
 80040f6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80040f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040fa:	f043 0301 	orr.w	r3, r3, #1
 80040fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	3308      	adds	r3, #8
 8004108:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800410c:	673a      	str	r2, [r7, #112]	; 0x70
 800410e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004110:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004112:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004114:	e841 2300 	strex	r3, r2, [r1]
 8004118:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800411a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800411c:	2b00      	cmp	r3, #0
 800411e:	d1e3      	bne.n	80040e8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004124:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004128:	d14f      	bne.n	80041ca <UART_Start_Receive_IT+0x196>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004130:	88fa      	ldrh	r2, [r7, #6]
 8004132:	429a      	cmp	r2, r3
 8004134:	d349      	bcc.n	80041ca <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800413e:	d107      	bne.n	8004150 <UART_Start_Receive_IT+0x11c>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d103      	bne.n	8004150 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	4a47      	ldr	r2, [pc, #284]	; (8004268 <UART_Start_Receive_IT+0x234>)
 800414c:	675a      	str	r2, [r3, #116]	; 0x74
 800414e:	e002      	b.n	8004156 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	4a46      	ldr	r2, [pc, #280]	; (800426c <UART_Start_Receive_IT+0x238>)
 8004154:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d01a      	beq.n	8004194 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004164:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004166:	e853 3f00 	ldrex	r3, [r3]
 800416a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800416c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800416e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004172:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	461a      	mov	r2, r3
 800417c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004180:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004182:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004184:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004186:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004188:	e841 2300 	strex	r3, r2, [r1]
 800418c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800418e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004190:	2b00      	cmp	r3, #0
 8004192:	d1e4      	bne.n	800415e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	3308      	adds	r3, #8
 800419a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800419e:	e853 3f00 	ldrex	r3, [r3]
 80041a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041aa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	3308      	adds	r3, #8
 80041b2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80041b4:	64ba      	str	r2, [r7, #72]	; 0x48
 80041b6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80041ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041bc:	e841 2300 	strex	r3, r2, [r1]
 80041c0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80041c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1e5      	bne.n	8004194 <UART_Start_Receive_IT+0x160>
 80041c8:	e046      	b.n	8004258 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041d2:	d107      	bne.n	80041e4 <UART_Start_Receive_IT+0x1b0>
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d103      	bne.n	80041e4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	4a24      	ldr	r2, [pc, #144]	; (8004270 <UART_Start_Receive_IT+0x23c>)
 80041e0:	675a      	str	r2, [r3, #116]	; 0x74
 80041e2:	e002      	b.n	80041ea <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	4a23      	ldr	r2, [pc, #140]	; (8004274 <UART_Start_Receive_IT+0x240>)
 80041e8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d019      	beq.n	8004226 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041fa:	e853 3f00 	ldrex	r3, [r3]
 80041fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004202:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004206:	677b      	str	r3, [r7, #116]	; 0x74
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	461a      	mov	r2, r3
 800420e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004210:	637b      	str	r3, [r7, #52]	; 0x34
 8004212:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004214:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004216:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004218:	e841 2300 	strex	r3, r2, [r1]
 800421c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800421e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004220:	2b00      	cmp	r3, #0
 8004222:	d1e6      	bne.n	80041f2 <UART_Start_Receive_IT+0x1be>
 8004224:	e018      	b.n	8004258 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	e853 3f00 	ldrex	r3, [r3]
 8004232:	613b      	str	r3, [r7, #16]
   return(result);
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	f043 0320 	orr.w	r3, r3, #32
 800423a:	67bb      	str	r3, [r7, #120]	; 0x78
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	461a      	mov	r2, r3
 8004242:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004244:	623b      	str	r3, [r7, #32]
 8004246:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004248:	69f9      	ldr	r1, [r7, #28]
 800424a:	6a3a      	ldr	r2, [r7, #32]
 800424c:	e841 2300 	strex	r3, r2, [r1]
 8004250:	61bb      	str	r3, [r7, #24]
   return(result);
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d1e6      	bne.n	8004226 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	378c      	adds	r7, #140	; 0x8c
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	08004ddd 	.word	0x08004ddd
 800426c:	08004a7d 	.word	0x08004a7d
 8004270:	080048c5 	.word	0x080048c5
 8004274:	0800470d 	.word	0x0800470d

08004278 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004278:	b480      	push	{r7}
 800427a:	b095      	sub	sp, #84	; 0x54
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004288:	e853 3f00 	ldrex	r3, [r3]
 800428c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800428e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004290:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004294:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	461a      	mov	r2, r3
 800429c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800429e:	643b      	str	r3, [r7, #64]	; 0x40
 80042a0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80042a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80042a6:	e841 2300 	strex	r3, r2, [r1]
 80042aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80042ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1e6      	bne.n	8004280 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	3308      	adds	r3, #8
 80042b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ba:	6a3b      	ldr	r3, [r7, #32]
 80042bc:	e853 3f00 	ldrex	r3, [r3]
 80042c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042c8:	f023 0301 	bic.w	r3, r3, #1
 80042cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	3308      	adds	r3, #8
 80042d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042de:	e841 2300 	strex	r3, r2, [r1]
 80042e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1e3      	bne.n	80042b2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d118      	bne.n	8004324 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	e853 3f00 	ldrex	r3, [r3]
 80042fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	f023 0310 	bic.w	r3, r3, #16
 8004306:	647b      	str	r3, [r7, #68]	; 0x44
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	461a      	mov	r2, r3
 800430e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004310:	61bb      	str	r3, [r7, #24]
 8004312:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004314:	6979      	ldr	r1, [r7, #20]
 8004316:	69ba      	ldr	r2, [r7, #24]
 8004318:	e841 2300 	strex	r3, r2, [r1]
 800431c:	613b      	str	r3, [r7, #16]
   return(result);
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1e6      	bne.n	80042f2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2220      	movs	r2, #32
 8004328:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004338:	bf00      	nop
 800433a:	3754      	adds	r7, #84	; 0x54
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004350:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2200      	movs	r2, #0
 8004356:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	f7ff f99a 	bl	800369c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004368:	bf00      	nop
 800436a:	3710      	adds	r7, #16
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004370:	b480      	push	{r7}
 8004372:	b08f      	sub	sp, #60	; 0x3c
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800437e:	2b21      	cmp	r3, #33	; 0x21
 8004380:	d14c      	bne.n	800441c <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004388:	b29b      	uxth	r3, r3
 800438a:	2b00      	cmp	r3, #0
 800438c:	d132      	bne.n	80043f4 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004394:	6a3b      	ldr	r3, [r7, #32]
 8004396:	e853 3f00 	ldrex	r3, [r3]
 800439a:	61fb      	str	r3, [r7, #28]
   return(result);
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043a2:	637b      	str	r3, [r7, #52]	; 0x34
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	461a      	mov	r2, r3
 80043aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043ae:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043b4:	e841 2300 	strex	r3, r2, [r1]
 80043b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d1e6      	bne.n	800438e <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	e853 3f00 	ldrex	r3, [r3]
 80043cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043d4:	633b      	str	r3, [r7, #48]	; 0x30
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	461a      	mov	r2, r3
 80043dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043de:	61bb      	str	r3, [r7, #24]
 80043e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e2:	6979      	ldr	r1, [r7, #20]
 80043e4:	69ba      	ldr	r2, [r7, #24]
 80043e6:	e841 2300 	strex	r3, r2, [r1]
 80043ea:	613b      	str	r3, [r7, #16]
   return(result);
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1e6      	bne.n	80043c0 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80043f2:	e013      	b.n	800441c <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043f8:	781a      	ldrb	r2, [r3, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004404:	1c5a      	adds	r2, r3, #1
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004410:	b29b      	uxth	r3, r3
 8004412:	3b01      	subs	r3, #1
 8004414:	b29a      	uxth	r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800441c:	bf00      	nop
 800441e:	373c      	adds	r7, #60	; 0x3c
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004428:	b480      	push	{r7}
 800442a:	b091      	sub	sp, #68	; 0x44
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004436:	2b21      	cmp	r3, #33	; 0x21
 8004438:	d151      	bne.n	80044de <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004440:	b29b      	uxth	r3, r3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d132      	bne.n	80044ac <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800444c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444e:	e853 3f00 	ldrex	r3, [r3]
 8004452:	623b      	str	r3, [r7, #32]
   return(result);
 8004454:	6a3b      	ldr	r3, [r7, #32]
 8004456:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800445a:	63bb      	str	r3, [r7, #56]	; 0x38
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	461a      	mov	r2, r3
 8004462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004464:	633b      	str	r3, [r7, #48]	; 0x30
 8004466:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004468:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800446a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800446c:	e841 2300 	strex	r3, r2, [r1]
 8004470:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1e6      	bne.n	8004446 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	e853 3f00 	ldrex	r3, [r3]
 8004484:	60fb      	str	r3, [r7, #12]
   return(result);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800448c:	637b      	str	r3, [r7, #52]	; 0x34
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	461a      	mov	r2, r3
 8004494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004496:	61fb      	str	r3, [r7, #28]
 8004498:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800449a:	69b9      	ldr	r1, [r7, #24]
 800449c:	69fa      	ldr	r2, [r7, #28]
 800449e:	e841 2300 	strex	r3, r2, [r1]
 80044a2:	617b      	str	r3, [r7, #20]
   return(result);
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d1e6      	bne.n	8004478 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80044aa:	e018      	b.n	80044de <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044b0:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80044b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044b4:	881b      	ldrh	r3, [r3, #0]
 80044b6:	461a      	mov	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044c0:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044c6:	1c9a      	adds	r2, r3, #2
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	3b01      	subs	r3, #1
 80044d6:	b29a      	uxth	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80044de:	bf00      	nop
 80044e0:	3744      	adds	r7, #68	; 0x44
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr

080044ea <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80044ea:	b480      	push	{r7}
 80044ec:	b091      	sub	sp, #68	; 0x44
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f8:	2b21      	cmp	r3, #33	; 0x21
 80044fa:	d160      	bne.n	80045be <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004502:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004504:	e057      	b.n	80045b6 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800450c:	b29b      	uxth	r3, r3
 800450e:	2b00      	cmp	r3, #0
 8004510:	d133      	bne.n	800457a <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	3308      	adds	r3, #8
 8004518:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451c:	e853 3f00 	ldrex	r3, [r3]
 8004520:	623b      	str	r3, [r7, #32]
   return(result);
 8004522:	6a3b      	ldr	r3, [r7, #32]
 8004524:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004528:	63bb      	str	r3, [r7, #56]	; 0x38
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	3308      	adds	r3, #8
 8004530:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004532:	633a      	str	r2, [r7, #48]	; 0x30
 8004534:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004536:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004538:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800453a:	e841 2300 	strex	r3, r2, [r1]
 800453e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1e5      	bne.n	8004512 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	e853 3f00 	ldrex	r3, [r3]
 8004552:	60fb      	str	r3, [r7, #12]
   return(result);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800455a:	637b      	str	r3, [r7, #52]	; 0x34
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	461a      	mov	r2, r3
 8004562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004564:	61fb      	str	r3, [r7, #28]
 8004566:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004568:	69b9      	ldr	r1, [r7, #24]
 800456a:	69fa      	ldr	r2, [r7, #28]
 800456c:	e841 2300 	strex	r3, r2, [r1]
 8004570:	617b      	str	r3, [r7, #20]
   return(result);
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d1e6      	bne.n	8004546 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8004578:	e021      	b.n	80045be <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	69db      	ldr	r3, [r3, #28]
 8004580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004584:	2b00      	cmp	r3, #0
 8004586:	d013      	beq.n	80045b0 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800458c:	781a      	ldrb	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004598:	1c5a      	adds	r2, r3, #1
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	3b01      	subs	r3, #1
 80045a8:	b29a      	uxth	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80045b0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80045b2:	3b01      	subs	r3, #1
 80045b4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80045b6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d1a4      	bne.n	8004506 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80045bc:	e7ff      	b.n	80045be <UART_TxISR_8BIT_FIFOEN+0xd4>
 80045be:	bf00      	nop
 80045c0:	3744      	adds	r7, #68	; 0x44
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr

080045ca <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80045ca:	b480      	push	{r7}
 80045cc:	b091      	sub	sp, #68	; 0x44
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d8:	2b21      	cmp	r3, #33	; 0x21
 80045da:	d165      	bne.n	80046a8 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80045e2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80045e4:	e05c      	b.n	80046a0 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d133      	bne.n	800465a <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	3308      	adds	r3, #8
 80045f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045fa:	6a3b      	ldr	r3, [r7, #32]
 80045fc:	e853 3f00 	ldrex	r3, [r3]
 8004600:	61fb      	str	r3, [r7, #28]
   return(result);
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004608:	637b      	str	r3, [r7, #52]	; 0x34
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	3308      	adds	r3, #8
 8004610:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004612:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004614:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004616:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004618:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800461a:	e841 2300 	strex	r3, r2, [r1]
 800461e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1e5      	bne.n	80045f2 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	e853 3f00 	ldrex	r3, [r3]
 8004632:	60bb      	str	r3, [r7, #8]
   return(result);
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800463a:	633b      	str	r3, [r7, #48]	; 0x30
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	461a      	mov	r2, r3
 8004642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004644:	61bb      	str	r3, [r7, #24]
 8004646:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004648:	6979      	ldr	r1, [r7, #20]
 800464a:	69ba      	ldr	r2, [r7, #24]
 800464c:	e841 2300 	strex	r3, r2, [r1]
 8004650:	613b      	str	r3, [r7, #16]
   return(result);
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d1e6      	bne.n	8004626 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8004658:	e026      	b.n	80046a8 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	69db      	ldr	r3, [r3, #28]
 8004660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004664:	2b00      	cmp	r3, #0
 8004666:	d018      	beq.n	800469a <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800466c:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800466e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004670:	881b      	ldrh	r3, [r3, #0]
 8004672:	461a      	mov	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800467c:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004682:	1c9a      	adds	r2, r3, #2
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800468e:	b29b      	uxth	r3, r3
 8004690:	3b01      	subs	r3, #1
 8004692:	b29a      	uxth	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800469a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800469c:	3b01      	subs	r3, #1
 800469e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80046a0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d19f      	bne.n	80045e6 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80046a6:	e7ff      	b.n	80046a8 <UART_TxISR_16BIT_FIFOEN+0xde>
 80046a8:	bf00      	nop
 80046aa:	3744      	adds	r7, #68	; 0x44
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b088      	sub	sp, #32
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	e853 3f00 	ldrex	r3, [r3]
 80046c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046d0:	61fb      	str	r3, [r7, #28]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	461a      	mov	r2, r3
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	61bb      	str	r3, [r7, #24]
 80046dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046de:	6979      	ldr	r1, [r7, #20]
 80046e0:	69ba      	ldr	r2, [r7, #24]
 80046e2:	e841 2300 	strex	r3, r2, [r1]
 80046e6:	613b      	str	r3, [r7, #16]
   return(result);
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d1e6      	bne.n	80046bc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2220      	movs	r2, #32
 80046f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f7fc f86b 	bl	80007d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004702:	bf00      	nop
 8004704:	3720      	adds	r7, #32
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
	...

0800470c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b09c      	sub	sp, #112	; 0x70
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800471a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004724:	2b22      	cmp	r3, #34	; 0x22
 8004726:	f040 80be 	bne.w	80048a6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004730:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004734:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004738:	b2d9      	uxtb	r1, r3
 800473a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800473e:	b2da      	uxtb	r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004744:	400a      	ands	r2, r1
 8004746:	b2d2      	uxtb	r2, r2
 8004748:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800474e:	1c5a      	adds	r2, r3, #1
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800475a:	b29b      	uxth	r3, r3
 800475c:	3b01      	subs	r3, #1
 800475e:	b29a      	uxth	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800476c:	b29b      	uxth	r3, r3
 800476e:	2b00      	cmp	r3, #0
 8004770:	f040 80a1 	bne.w	80048b6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800477a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800477c:	e853 3f00 	ldrex	r3, [r3]
 8004780:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004782:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004784:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004788:	66bb      	str	r3, [r7, #104]	; 0x68
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	461a      	mov	r2, r3
 8004790:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004792:	65bb      	str	r3, [r7, #88]	; 0x58
 8004794:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004796:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004798:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800479a:	e841 2300 	strex	r3, r2, [r1]
 800479e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80047a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d1e6      	bne.n	8004774 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	3308      	adds	r3, #8
 80047ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047b0:	e853 3f00 	ldrex	r3, [r3]
 80047b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80047b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047b8:	f023 0301 	bic.w	r3, r3, #1
 80047bc:	667b      	str	r3, [r7, #100]	; 0x64
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	3308      	adds	r3, #8
 80047c4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80047c6:	647a      	str	r2, [r7, #68]	; 0x44
 80047c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80047cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047ce:	e841 2300 	strex	r3, r2, [r1]
 80047d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80047d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d1e5      	bne.n	80047a6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2220      	movs	r2, #32
 80047de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a33      	ldr	r2, [pc, #204]	; (80048c0 <UART_RxISR_8BIT+0x1b4>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d01f      	beq.n	8004838 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d018      	beq.n	8004838 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800480c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480e:	e853 3f00 	ldrex	r3, [r3]
 8004812:	623b      	str	r3, [r7, #32]
   return(result);
 8004814:	6a3b      	ldr	r3, [r7, #32]
 8004816:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800481a:	663b      	str	r3, [r7, #96]	; 0x60
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	461a      	mov	r2, r3
 8004822:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004824:	633b      	str	r3, [r7, #48]	; 0x30
 8004826:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004828:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800482a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800482c:	e841 2300 	strex	r3, r2, [r1]
 8004830:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004834:	2b00      	cmp	r3, #0
 8004836:	d1e6      	bne.n	8004806 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800483c:	2b01      	cmp	r3, #1
 800483e:	d12e      	bne.n	800489e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	e853 3f00 	ldrex	r3, [r3]
 8004852:	60fb      	str	r3, [r7, #12]
   return(result);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f023 0310 	bic.w	r3, r3, #16
 800485a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	461a      	mov	r2, r3
 8004862:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004864:	61fb      	str	r3, [r7, #28]
 8004866:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004868:	69b9      	ldr	r1, [r7, #24]
 800486a:	69fa      	ldr	r2, [r7, #28]
 800486c:	e841 2300 	strex	r3, r2, [r1]
 8004870:	617b      	str	r3, [r7, #20]
   return(result);
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1e6      	bne.n	8004846 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	69db      	ldr	r3, [r3, #28]
 800487e:	f003 0310 	and.w	r3, r3, #16
 8004882:	2b10      	cmp	r3, #16
 8004884:	d103      	bne.n	800488e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2210      	movs	r2, #16
 800488c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004894:	4619      	mov	r1, r3
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f7fe ff0a 	bl	80036b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800489c:	e00b      	b.n	80048b6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f7fb ff7a 	bl	8000798 <HAL_UART_RxCpltCallback>
}
 80048a4:	e007      	b.n	80048b6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	699a      	ldr	r2, [r3, #24]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f042 0208 	orr.w	r2, r2, #8
 80048b4:	619a      	str	r2, [r3, #24]
}
 80048b6:	bf00      	nop
 80048b8:	3770      	adds	r7, #112	; 0x70
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	40008000 	.word	0x40008000

080048c4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b09c      	sub	sp, #112	; 0x70
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80048d2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048dc:	2b22      	cmp	r3, #34	; 0x22
 80048de:	f040 80be 	bne.w	8004a5e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048f0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80048f2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80048f6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80048fa:	4013      	ands	r3, r2
 80048fc:	b29a      	uxth	r2, r3
 80048fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004900:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004906:	1c9a      	adds	r2, r3, #2
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004912:	b29b      	uxth	r3, r3
 8004914:	3b01      	subs	r3, #1
 8004916:	b29a      	uxth	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004924:	b29b      	uxth	r3, r3
 8004926:	2b00      	cmp	r3, #0
 8004928:	f040 80a1 	bne.w	8004a6e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004932:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004934:	e853 3f00 	ldrex	r3, [r3]
 8004938:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800493a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800493c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004940:	667b      	str	r3, [r7, #100]	; 0x64
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	461a      	mov	r2, r3
 8004948:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800494a:	657b      	str	r3, [r7, #84]	; 0x54
 800494c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004950:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004952:	e841 2300 	strex	r3, r2, [r1]
 8004956:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004958:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1e6      	bne.n	800492c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	3308      	adds	r3, #8
 8004964:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004968:	e853 3f00 	ldrex	r3, [r3]
 800496c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800496e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004970:	f023 0301 	bic.w	r3, r3, #1
 8004974:	663b      	str	r3, [r7, #96]	; 0x60
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	3308      	adds	r3, #8
 800497c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800497e:	643a      	str	r2, [r7, #64]	; 0x40
 8004980:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004982:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004984:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004986:	e841 2300 	strex	r3, r2, [r1]
 800498a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800498c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1e5      	bne.n	800495e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2220      	movs	r2, #32
 8004996:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a33      	ldr	r2, [pc, #204]	; (8004a78 <UART_RxISR_16BIT+0x1b4>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d01f      	beq.n	80049f0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d018      	beq.n	80049f0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c4:	6a3b      	ldr	r3, [r7, #32]
 80049c6:	e853 3f00 	ldrex	r3, [r3]
 80049ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80049d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	461a      	mov	r2, r3
 80049da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049de:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049e4:	e841 2300 	strex	r3, r2, [r1]
 80049e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d1e6      	bne.n	80049be <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d12e      	bne.n	8004a56 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	e853 3f00 	ldrex	r3, [r3]
 8004a0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	f023 0310 	bic.w	r3, r3, #16
 8004a12:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	461a      	mov	r2, r3
 8004a1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a1c:	61bb      	str	r3, [r7, #24]
 8004a1e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a20:	6979      	ldr	r1, [r7, #20]
 8004a22:	69ba      	ldr	r2, [r7, #24]
 8004a24:	e841 2300 	strex	r3, r2, [r1]
 8004a28:	613b      	str	r3, [r7, #16]
   return(result);
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1e6      	bne.n	80049fe <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	69db      	ldr	r3, [r3, #28]
 8004a36:	f003 0310 	and.w	r3, r3, #16
 8004a3a:	2b10      	cmp	r3, #16
 8004a3c:	d103      	bne.n	8004a46 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2210      	movs	r2, #16
 8004a44:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f7fe fe2e 	bl	80036b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004a54:	e00b      	b.n	8004a6e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f7fb fe9e 	bl	8000798 <HAL_UART_RxCpltCallback>
}
 8004a5c:	e007      	b.n	8004a6e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	699a      	ldr	r2, [r3, #24]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f042 0208 	orr.w	r2, r2, #8
 8004a6c:	619a      	str	r2, [r3, #24]
}
 8004a6e:	bf00      	nop
 8004a70:	3770      	adds	r7, #112	; 0x70
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	40008000 	.word	0x40008000

08004a7c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b0ac      	sub	sp, #176	; 0xb0
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004a8a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	69db      	ldr	r3, [r3, #28]
 8004a94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ab2:	2b22      	cmp	r3, #34	; 0x22
 8004ab4:	f040 8182 	bne.w	8004dbc <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004abe:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004ac2:	e125      	b.n	8004d10 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aca:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004ace:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8004ad2:	b2d9      	uxtb	r1, r3
 8004ad4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8004ad8:	b2da      	uxtb	r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ade:	400a      	ands	r2, r1
 8004ae0:	b2d2      	uxtb	r2, r2
 8004ae2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ae8:	1c5a      	adds	r2, r3, #1
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	3b01      	subs	r3, #1
 8004af8:	b29a      	uxth	r2, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	69db      	ldr	r3, [r3, #28]
 8004b06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004b0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004b0e:	f003 0307 	and.w	r3, r3, #7
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d053      	beq.n	8004bbe <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004b16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d011      	beq.n	8004b46 <UART_RxISR_8BIT_FIFOEN+0xca>
 8004b22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00b      	beq.n	8004b46 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2201      	movs	r2, #1
 8004b34:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b3c:	f043 0201 	orr.w	r2, r3, #1
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004b4a:	f003 0302 	and.w	r3, r3, #2
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d011      	beq.n	8004b76 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8004b52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b56:	f003 0301 	and.w	r3, r3, #1
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00b      	beq.n	8004b76 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2202      	movs	r2, #2
 8004b64:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b6c:	f043 0204 	orr.w	r2, r3, #4
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004b7a:	f003 0304 	and.w	r3, r3, #4
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d011      	beq.n	8004ba6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8004b82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b86:	f003 0301 	and.w	r3, r3, #1
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00b      	beq.n	8004ba6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	2204      	movs	r2, #4
 8004b94:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b9c:	f043 0202 	orr.w	r2, r3, #2
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d006      	beq.n	8004bbe <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f7fe fd73 	bl	800369c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	f040 80a2 	bne.w	8004d10 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004bd4:	e853 3f00 	ldrex	r3, [r3]
 8004bd8:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8004bda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004be0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	461a      	mov	r2, r3
 8004bea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004bee:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004bf0:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004bf4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004bf6:	e841 2300 	strex	r3, r2, [r1]
 8004bfa:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8004bfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1e4      	bne.n	8004bcc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	3308      	adds	r3, #8
 8004c08:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c0c:	e853 3f00 	ldrex	r3, [r3]
 8004c10:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8004c12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c18:	f023 0301 	bic.w	r3, r3, #1
 8004c1c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	3308      	adds	r3, #8
 8004c26:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004c2a:	66ba      	str	r2, [r7, #104]	; 0x68
 8004c2c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c2e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8004c30:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004c32:	e841 2300 	strex	r3, r2, [r1]
 8004c36:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8004c38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d1e1      	bne.n	8004c02 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2220      	movs	r2, #32
 8004c42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a5f      	ldr	r2, [pc, #380]	; (8004dd4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d021      	beq.n	8004ca0 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d01a      	beq.n	8004ca0 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c72:	e853 3f00 	ldrex	r3, [r3]
 8004c76:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004c78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c7a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	461a      	mov	r2, r3
 8004c88:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c8c:	657b      	str	r3, [r7, #84]	; 0x54
 8004c8e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c90:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004c92:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004c94:	e841 2300 	strex	r3, r2, [r1]
 8004c98:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004c9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1e4      	bne.n	8004c6a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d130      	bne.n	8004d0a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cb6:	e853 3f00 	ldrex	r3, [r3]
 8004cba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cbe:	f023 0310 	bic.w	r3, r3, #16
 8004cc2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	461a      	mov	r2, r3
 8004ccc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004cd0:	643b      	str	r3, [r7, #64]	; 0x40
 8004cd2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004cd6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004cd8:	e841 2300 	strex	r3, r2, [r1]
 8004cdc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d1e4      	bne.n	8004cae <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	69db      	ldr	r3, [r3, #28]
 8004cea:	f003 0310 	and.w	r3, r3, #16
 8004cee:	2b10      	cmp	r3, #16
 8004cf0:	d103      	bne.n	8004cfa <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2210      	movs	r2, #16
 8004cf8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004d00:	4619      	mov	r1, r3
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f7fe fcd4 	bl	80036b0 <HAL_UARTEx_RxEventCallback>
 8004d08:	e002      	b.n	8004d10 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f7fb fd44 	bl	8000798 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004d10:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d006      	beq.n	8004d26 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8004d18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d1c:	f003 0320 	and.w	r3, r3, #32
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	f47f aecf 	bne.w	8004ac4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004d2c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004d30:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d049      	beq.n	8004dcc <UART_RxISR_8BIT_FIFOEN+0x350>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004d3e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d242      	bcs.n	8004dcc <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	3308      	adds	r3, #8
 8004d4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d4e:	6a3b      	ldr	r3, [r7, #32]
 8004d50:	e853 3f00 	ldrex	r3, [r3]
 8004d54:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	3308      	adds	r3, #8
 8004d66:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004d6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d6c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d72:	e841 2300 	strex	r3, r2, [r1]
 8004d76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1e3      	bne.n	8004d46 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a15      	ldr	r2, [pc, #84]	; (8004dd8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8004d82:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	e853 3f00 	ldrex	r3, [r3]
 8004d90:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	f043 0320 	orr.w	r3, r3, #32
 8004d98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	461a      	mov	r2, r3
 8004da2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004da6:	61bb      	str	r3, [r7, #24]
 8004da8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004daa:	6979      	ldr	r1, [r7, #20]
 8004dac:	69ba      	ldr	r2, [r7, #24]
 8004dae:	e841 2300 	strex	r3, r2, [r1]
 8004db2:	613b      	str	r3, [r7, #16]
   return(result);
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d1e4      	bne.n	8004d84 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004dba:	e007      	b.n	8004dcc <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	699a      	ldr	r2, [r3, #24]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f042 0208 	orr.w	r2, r2, #8
 8004dca:	619a      	str	r2, [r3, #24]
}
 8004dcc:	bf00      	nop
 8004dce:	37b0      	adds	r7, #176	; 0xb0
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	40008000 	.word	0x40008000
 8004dd8:	0800470d 	.word	0x0800470d

08004ddc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b0ae      	sub	sp, #184	; 0xb8
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004dea:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	69db      	ldr	r3, [r3, #28]
 8004df4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e12:	2b22      	cmp	r3, #34	; 0x22
 8004e14:	f040 8186 	bne.w	8005124 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004e1e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004e22:	e129      	b.n	8005078 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8004e36:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8004e3a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8004e3e:	4013      	ands	r3, r2
 8004e40:	b29a      	uxth	r2, r3
 8004e42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004e46:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e4c:	1c9a      	adds	r2, r3, #2
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	b29a      	uxth	r2, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	69db      	ldr	r3, [r3, #28]
 8004e6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004e6e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004e72:	f003 0307 	and.w	r3, r3, #7
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d053      	beq.n	8004f22 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004e7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004e7e:	f003 0301 	and.w	r3, r3, #1
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d011      	beq.n	8004eaa <UART_RxISR_16BIT_FIFOEN+0xce>
 8004e86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00b      	beq.n	8004eaa <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2201      	movs	r2, #1
 8004e98:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ea0:	f043 0201 	orr.w	r2, r3, #1
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004eaa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004eae:	f003 0302 	and.w	r3, r3, #2
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d011      	beq.n	8004eda <UART_RxISR_16BIT_FIFOEN+0xfe>
 8004eb6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004eba:	f003 0301 	and.w	r3, r3, #1
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00b      	beq.n	8004eda <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2202      	movs	r2, #2
 8004ec8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ed0:	f043 0204 	orr.w	r2, r3, #4
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004eda:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004ede:	f003 0304 	and.w	r3, r3, #4
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d011      	beq.n	8004f0a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8004ee6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004eea:	f003 0301 	and.w	r3, r3, #1
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00b      	beq.n	8004f0a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2204      	movs	r2, #4
 8004ef8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f00:	f043 0202 	orr.w	r2, r3, #2
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d006      	beq.n	8004f22 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f7fe fbc1 	bl	800369c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	f040 80a4 	bne.w	8005078 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f38:	e853 3f00 	ldrex	r3, [r3]
 8004f3c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004f3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004f52:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004f56:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f58:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004f5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004f5e:	e841 2300 	strex	r3, r2, [r1]
 8004f62:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004f64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d1e2      	bne.n	8004f30 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	3308      	adds	r3, #8
 8004f70:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f74:	e853 3f00 	ldrex	r3, [r3]
 8004f78:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004f7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f80:	f023 0301 	bic.w	r3, r3, #1
 8004f84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	3308      	adds	r3, #8
 8004f8e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004f92:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004f94:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f96:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004f98:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004f9a:	e841 2300 	strex	r3, r2, [r1]
 8004f9e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004fa0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1e1      	bne.n	8004f6a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2220      	movs	r2, #32
 8004faa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a5f      	ldr	r2, [pc, #380]	; (800513c <UART_RxISR_16BIT_FIFOEN+0x360>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d021      	beq.n	8005008 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d01a      	beq.n	8005008 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fda:	e853 3f00 	ldrex	r3, [r3]
 8004fde:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004fe0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fe2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004fe6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	461a      	mov	r2, r3
 8004ff0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004ff4:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ff6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004ffa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ffc:	e841 2300 	strex	r3, r2, [r1]
 8005000:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005002:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005004:	2b00      	cmp	r3, #0
 8005006:	d1e4      	bne.n	8004fd2 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800500c:	2b01      	cmp	r3, #1
 800500e:	d130      	bne.n	8005072 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800501c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800501e:	e853 3f00 	ldrex	r3, [r3]
 8005022:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005026:	f023 0310 	bic.w	r3, r3, #16
 800502a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	461a      	mov	r2, r3
 8005034:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005038:	647b      	str	r3, [r7, #68]	; 0x44
 800503a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800503c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800503e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005040:	e841 2300 	strex	r3, r2, [r1]
 8005044:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005048:	2b00      	cmp	r3, #0
 800504a:	d1e4      	bne.n	8005016 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	69db      	ldr	r3, [r3, #28]
 8005052:	f003 0310 	and.w	r3, r3, #16
 8005056:	2b10      	cmp	r3, #16
 8005058:	d103      	bne.n	8005062 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	2210      	movs	r2, #16
 8005060:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005068:	4619      	mov	r1, r3
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f7fe fb20 	bl	80036b0 <HAL_UARTEx_RxEventCallback>
 8005070:	e002      	b.n	8005078 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f7fb fb90 	bl	8000798 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005078:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800507c:	2b00      	cmp	r3, #0
 800507e:	d006      	beq.n	800508e <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8005080:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005084:	f003 0320 	and.w	r3, r3, #32
 8005088:	2b00      	cmp	r3, #0
 800508a:	f47f aecb 	bne.w	8004e24 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005094:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005098:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800509c:	2b00      	cmp	r3, #0
 800509e:	d049      	beq.n	8005134 <UART_RxISR_16BIT_FIFOEN+0x358>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80050a6:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d242      	bcs.n	8005134 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	3308      	adds	r3, #8
 80050b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b8:	e853 3f00 	ldrex	r3, [r3]
 80050bc:	623b      	str	r3, [r7, #32]
   return(result);
 80050be:	6a3b      	ldr	r3, [r7, #32]
 80050c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	3308      	adds	r3, #8
 80050ce:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80050d2:	633a      	str	r2, [r7, #48]	; 0x30
 80050d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050da:	e841 2300 	strex	r3, r2, [r1]
 80050de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80050e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d1e3      	bne.n	80050ae <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a15      	ldr	r2, [pc, #84]	; (8005140 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80050ea:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	e853 3f00 	ldrex	r3, [r3]
 80050f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f043 0320 	orr.w	r3, r3, #32
 8005100:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	461a      	mov	r2, r3
 800510a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800510e:	61fb      	str	r3, [r7, #28]
 8005110:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005112:	69b9      	ldr	r1, [r7, #24]
 8005114:	69fa      	ldr	r2, [r7, #28]
 8005116:	e841 2300 	strex	r3, r2, [r1]
 800511a:	617b      	str	r3, [r7, #20]
   return(result);
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d1e4      	bne.n	80050ec <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005122:	e007      	b.n	8005134 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	699a      	ldr	r2, [r3, #24]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f042 0208 	orr.w	r2, r2, #8
 8005132:	619a      	str	r2, [r3, #24]
}
 8005134:	bf00      	nop
 8005136:	37b8      	adds	r7, #184	; 0xb8
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}
 800513c:	40008000 	.word	0x40008000
 8005140:	080048c5 	.word	0x080048c5

08005144 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005144:	b480      	push	{r7}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800514c:	bf00      	nop
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005160:	bf00      	nop
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005174:	bf00      	nop
 8005176:	370c      	adds	r7, #12
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005180:	b480      	push	{r7}
 8005182:	b085      	sub	sp, #20
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800518e:	2b01      	cmp	r3, #1
 8005190:	d101      	bne.n	8005196 <HAL_UARTEx_DisableFifoMode+0x16>
 8005192:	2302      	movs	r3, #2
 8005194:	e027      	b.n	80051e6 <HAL_UARTEx_DisableFifoMode+0x66>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2201      	movs	r2, #1
 800519a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2224      	movs	r2, #36	; 0x24
 80051a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f022 0201 	bic.w	r2, r2, #1
 80051bc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80051c4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2220      	movs	r2, #32
 80051d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3714      	adds	r7, #20
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr

080051f2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80051f2:	b580      	push	{r7, lr}
 80051f4:	b084      	sub	sp, #16
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
 80051fa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005202:	2b01      	cmp	r3, #1
 8005204:	d101      	bne.n	800520a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005206:	2302      	movs	r3, #2
 8005208:	e02d      	b.n	8005266 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2201      	movs	r2, #1
 800520e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2224      	movs	r2, #36	; 0x24
 8005216:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f022 0201 	bic.w	r2, r2, #1
 8005230:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	683a      	ldr	r2, [r7, #0]
 8005242:	430a      	orrs	r2, r1
 8005244:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 f850 	bl	80052ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2220      	movs	r2, #32
 8005258:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	3710      	adds	r7, #16
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}

0800526e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800526e:	b580      	push	{r7, lr}
 8005270:	b084      	sub	sp, #16
 8005272:	af00      	add	r7, sp, #0
 8005274:	6078      	str	r0, [r7, #4]
 8005276:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800527e:	2b01      	cmp	r3, #1
 8005280:	d101      	bne.n	8005286 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005282:	2302      	movs	r3, #2
 8005284:	e02d      	b.n	80052e2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2201      	movs	r2, #1
 800528a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2224      	movs	r2, #36	; 0x24
 8005292:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f022 0201 	bic.w	r2, r2, #1
 80052ac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	683a      	ldr	r2, [r7, #0]
 80052be:	430a      	orrs	r2, r1
 80052c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f812 	bl	80052ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2220      	movs	r2, #32
 80052d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3710      	adds	r7, #16
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
	...

080052ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b085      	sub	sp, #20
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d108      	bne.n	800530e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800530c:	e031      	b.n	8005372 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800530e:	2308      	movs	r3, #8
 8005310:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005312:	2308      	movs	r3, #8
 8005314:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	0e5b      	lsrs	r3, r3, #25
 800531e:	b2db      	uxtb	r3, r3
 8005320:	f003 0307 	and.w	r3, r3, #7
 8005324:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	0f5b      	lsrs	r3, r3, #29
 800532e:	b2db      	uxtb	r3, r3
 8005330:	f003 0307 	and.w	r3, r3, #7
 8005334:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005336:	7bbb      	ldrb	r3, [r7, #14]
 8005338:	7b3a      	ldrb	r2, [r7, #12]
 800533a:	4911      	ldr	r1, [pc, #68]	; (8005380 <UARTEx_SetNbDataToProcess+0x94>)
 800533c:	5c8a      	ldrb	r2, [r1, r2]
 800533e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005342:	7b3a      	ldrb	r2, [r7, #12]
 8005344:	490f      	ldr	r1, [pc, #60]	; (8005384 <UARTEx_SetNbDataToProcess+0x98>)
 8005346:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005348:	fb93 f3f2 	sdiv	r3, r3, r2
 800534c:	b29a      	uxth	r2, r3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005354:	7bfb      	ldrb	r3, [r7, #15]
 8005356:	7b7a      	ldrb	r2, [r7, #13]
 8005358:	4909      	ldr	r1, [pc, #36]	; (8005380 <UARTEx_SetNbDataToProcess+0x94>)
 800535a:	5c8a      	ldrb	r2, [r1, r2]
 800535c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005360:	7b7a      	ldrb	r2, [r7, #13]
 8005362:	4908      	ldr	r1, [pc, #32]	; (8005384 <UARTEx_SetNbDataToProcess+0x98>)
 8005364:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005366:	fb93 f3f2 	sdiv	r3, r3, r2
 800536a:	b29a      	uxth	r2, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005372:	bf00      	nop
 8005374:	3714      	adds	r7, #20
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	08005428 	.word	0x08005428
 8005384:	08005430 	.word	0x08005430

08005388 <__libc_init_array>:
 8005388:	b570      	push	{r4, r5, r6, lr}
 800538a:	4d0d      	ldr	r5, [pc, #52]	; (80053c0 <__libc_init_array+0x38>)
 800538c:	4c0d      	ldr	r4, [pc, #52]	; (80053c4 <__libc_init_array+0x3c>)
 800538e:	1b64      	subs	r4, r4, r5
 8005390:	10a4      	asrs	r4, r4, #2
 8005392:	2600      	movs	r6, #0
 8005394:	42a6      	cmp	r6, r4
 8005396:	d109      	bne.n	80053ac <__libc_init_array+0x24>
 8005398:	4d0b      	ldr	r5, [pc, #44]	; (80053c8 <__libc_init_array+0x40>)
 800539a:	4c0c      	ldr	r4, [pc, #48]	; (80053cc <__libc_init_array+0x44>)
 800539c:	f000 f820 	bl	80053e0 <_init>
 80053a0:	1b64      	subs	r4, r4, r5
 80053a2:	10a4      	asrs	r4, r4, #2
 80053a4:	2600      	movs	r6, #0
 80053a6:	42a6      	cmp	r6, r4
 80053a8:	d105      	bne.n	80053b6 <__libc_init_array+0x2e>
 80053aa:	bd70      	pop	{r4, r5, r6, pc}
 80053ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80053b0:	4798      	blx	r3
 80053b2:	3601      	adds	r6, #1
 80053b4:	e7ee      	b.n	8005394 <__libc_init_array+0xc>
 80053b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80053ba:	4798      	blx	r3
 80053bc:	3601      	adds	r6, #1
 80053be:	e7f2      	b.n	80053a6 <__libc_init_array+0x1e>
 80053c0:	08005440 	.word	0x08005440
 80053c4:	08005440 	.word	0x08005440
 80053c8:	08005440 	.word	0x08005440
 80053cc:	08005444 	.word	0x08005444

080053d0 <memset>:
 80053d0:	4402      	add	r2, r0
 80053d2:	4603      	mov	r3, r0
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d100      	bne.n	80053da <memset+0xa>
 80053d8:	4770      	bx	lr
 80053da:	f803 1b01 	strb.w	r1, [r3], #1
 80053de:	e7f9      	b.n	80053d4 <memset+0x4>

080053e0 <_init>:
 80053e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053e2:	bf00      	nop
 80053e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053e6:	bc08      	pop	{r3}
 80053e8:	469e      	mov	lr, r3
 80053ea:	4770      	bx	lr

080053ec <_fini>:
 80053ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ee:	bf00      	nop
 80053f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053f2:	bc08      	pop	{r3}
 80053f4:	469e      	mov	lr, r3
 80053f6:	4770      	bx	lr
